 /*                       S A S L I S T
 *- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- -- *
 *                                                                     *
 * COPYRIGHT: COPYRIGHT BY GESELLSCHAFT FUER MATHEMATIK UND            *
 *                                     DATENVERARBEITUNG MBH BONN,     *
 *                        - RECHENZENTREN -                            *
 *                        SCHLOSS BIRLINGHOVEN                         *
 *                        5205 ST. AUGUSTIN 1                          *
 *                                                                     *
 *           FURTHER COPIES OF THIS PROGRAM MAY BE OBTAINED            *
 *           BY WRITING TO THE ABOVE ADDRESS.                          *
 *                                                                     *
 *                                                                     *
 *                                                                     *
 *       S A S L I S T                                                 *
 *                                                                     *
 *                                                                     *
 * <CLASS>:                                                            *
 *       SYSTEM PROGRAMMER'S TOOL SET                                  *
 *                                                                     *
 * <FUNCTION/OPERATION>:                                               *
 *                                                                     *
 *       THE PROGRAM READS THE THE PRINTFILE OF THE ASSEMBLER H        *
 *       AND REFORMATS IST. THE PROGRAM IS USED AS A PROGRAMMING       *
 *       TOOL TO GET FULL ADVANTAGE OF THE FOLLOWING TECHNIQUES:       *
 *                                                                     *
 *       THERE IS A SPECIAL MACRO SET CALLED STRUCTURED PROGRAMMING    *
 *       MACROS WITH ALLOW THE ASSEMBLER PROGRAMMER TO CODE            *
 *       ALGORITHMIC STRUCTURES LIKE THOSE OF ALGOL60 EXPLICITY        *
 *       VIA MACROS. THE PROBLEM IS THAT IF THE PROGRAM IS ASSEMBLED   *
 *       USING THE 'PRINT NOGEN' OPTIONS OF THE ASSEMBLER THERE ARE    *
 *       VERY FEW INFORMATIONS ABOUT THE CODE GENERATED BY THE         *
 *       ASSEMBLER BECAUSE WE EXPECT MORE THAN 90 PERCENT OF           *
 *       THE ASSEMBLER PROGRAM ARE MACRO CALLS. ON THE OTHER HAND      *
 *       IF THE PROGRAM IS ASSEMBLED WITH THE 'PRINT GEN' OPTION       *
 *       THE ASSEMBLY LIST IS LENGTHENED BY A FACTOR TEN AND ALMOST    *
 *       UNREADABLE FOR A NORMAL DEBUGGING PROCESS.                    *
 *                                                                     *
 *       ANOTHER PROBLEM OCCURS WHEN USING MANY COPY INSTRUCTIONS.     *
 *       THE PROGRAM LOGIC ABSTRACTIONS OF THE SOURCE PROGRAM          *
 *       IS DESTROYED BY THE FACT THAT ALL CODE IS COPIED IN AND       *
 *       SEQUENTIALLY SHOWN IN THE ASSEMBLER LIST. WE USE COPY         *
 *       INSTRUCTIONS TO IMPLEMENT PROGRAMMING TECHNIQUE CALLED        *
 *       'REFINEMENT TECHNIQUE'. WE WANT THE ASSEMBLY LISTING SHOW     *
 *       EACH PART COPIED IN COMPLETELY ONE AFTER THE OTHER IN         *
 *       A HIERARCHICAL ORDER.                                         *
 *                                                                     *
 *       THE PROGRAM MAKES THE FOLLOWING MODIFICATIONS OF THE          *
 *       ASSEMBLY OUTPUT LIST:                                         *
 *                                                                     *
 *       THE OUTPUT OF MACRO EXPANSIONS WILL BE COMPACTED.             *
 *       ALL TEXT IN THE SOURCE PART OF MACRO EXPANSION LINES          *
 *       WILL BE OVERWRITTEN BY BLANKS. ALL LINES WHERE NO CODE        *
 *       IS GENERATED (I. E.) WHERE THE OBJECT CODE PART OF THE        *
 *       LINE IS EMPTY IS DELETED. THE LOCATION, OBJECT CODE AND       *
 *       ADDRESS PART OF THE FIRST LINE REMAINING IS MERGED INTO       *
 *       THE LINE CONTAINING THE MACRO CALL.                           *
 *       THE PROGRAM IDENTIFIES DSECT MAPPING MACROS. IN THIS CASE     *
 *       ONLY THE DSECT STATEMENT REMAINS IN THE MACRO EXPANSION.      *
 *                                                                     *
 *       THE GLOBAL MODIFICATIONS OF THE SOURCE LISTING LAYOUT ARE:    *
 *       EACH COPIED IN PART OF THE PROGRAM IS SHOWN AS A              *
 *       SEPARATE UNIT. THE LISTING STARTS WITH THE MAIN PROGRAM.      *
 *       AFTER THE MAIN PROGRAMS END STATEMENT THE PROGRAM LISTS       *
 *       THE COPIED IN PARTS OF THE MAIN PROGRAM IN A HIERARCHICAL     *
 *       ORDER.                                                        *
 *       THE PROGRAM ASSUMES THAT THE LAST STATEMENT OF A MEMBER       *
 *       BROUGHT IN BY A COPY MEMBERNAME INSTRUCTION IS                *
 *       A MACRO CALL 'ENDCOPY MEMBERNAME' FOR IN A NORMAL             *
 *       ASSEMBLY LISTING THE END OF COPIED MEMBER CANNOT BE           *
 *       IDENTIFIED.                                                   *
 *       WE ALSO RECOMMEND TO CODE A TITLE STATEMENT AS THE FIRST      *
 *       STATEMENT IN EACH MEMBER COPIED IN.                           *
 *       THE STATEMENT NUMBERS OF THE OUTPUT LISTING IS PREFIXED BY    *
 *       A COPY NESTING LEVEL NUMBER. THIS IS ALSO DONE IN             *
 *       THE CROSS REFERENCE PART OF THE LISTING.                      *
 *                                                                     *
 *       THE FOLLOWING PARAGRAPH WILL NOT AFFECT YOU IF YOU USE THE    *
 *       STANDARD IBM VERSION OF THE ASSEMBLER H:                      *
 *       SASLIST RECOGNIZES UNDERSCORED STATEMENT NUMBERS IN THE       *
 *       CROSS REFERENCE. THOSE ARE PRODUCED BY THE STANFORD LINEAR    *
 *       ACCELARATOR CENTER VERSION OF THE ASSEMBLER TO INDICATE       *
 *       STORAGE ALTERATIONS. IF A STATEMENT NUMBER WAS UNDERSCORED    *
 *       THE DOT BETWEEN THE LEVEL AND STATEMENT NUMBER IS REPLACED    *
 *       BY A COLON. (THE LINE IS NOT UNDERSCORED FOR WE USE A LASER   *
 *       PRINTER THAT IS NOT ABLE TO OVERPRINT LINES).                 *
 *                                                                     *
 *       FOR THE LISTING IS NO LONGER SORTED BY STATEMENT NUMBERS      *
 *       AN ADDITION CROSS REFERENCE SHOWING THE BEGINNING PAGE        *
 *       OF ALL CODE PARTS BETWEEN COPY AND ENDCOPY STATEMENTS         *
 *       SORTED BY STATEMENT NUMBERS.                                  *
 *                                                                     *
 *       WHEN USING OUR MACRO SET FOR STRUCTURED PROGRAMMING           *
 *       THE CROSSREFERENCE CONTAINS MANY LABELS GENERATED             *
 *       INTERNAL TO THE MACROS. IN MOST CASES THESE LABELS            *
 *       ARE USELESS. IT IS ASSUMED THAT ALL LABELS OF THIS TYPE       *
 *       START WITH THE CHARACTERS '@@'. THE PROGRAM REMOVES           *
 *       ALL THESE LABELS FROM THE CROSS REFERENCE LIST EXCEPT THE     *
 *       CONTROL LEVEL OF SASLIST IS 'ASIS' AS DESCRIBED NOW:          *
 *                                                                     *
 *       IN SOME CASES IT IS USEFUL TO SEE PARTS OF THE PROGRAM        *
 *       LISTING SUPPRESSED BY NORMAL SASLIST PROCESSING.              *
 *       THEREFORE WE HAVE A WAY TO CONTROL THE WORK OF SASLIST        *
 *       SIMILAR TO WHAT THE PRINT STATEMENT DOES TO CONTROL THE       *
 *       ASSEMBLER.                                                    *
 *       THERE IS A MACRO NAMED SASLIST WHICH ACCEPTS ONE PARAMETER.   *
 *       THE MACRO CALL MUST APPEAR IN THE OUTPUT LISTING IN ORDER     *
 *       TO BE SEEN BY SASLIST.                                        *
 *       THE POSSIBLE PARAMETERS ARE                                   *
 *                                                                     *
 *       DATA  : THIS IS THE DEFAULT FUNCTION DESCRIBED ABOVE          *
 *       CODE  : SAME AS DATA. (WILL BE LESS OUTPUT IN A FUTURE        *
 *               IMPLEMENTATION.)                                      *
 *                                                                     *
 *       LOC   : THE MACRO EXPANSION ARE FURTHER COMPACTED. ONLY THE   *
 *               FIRST NON BLANK LOCATION FIELD OF A MACRO EXPANSION   *
 *               IS COPIED INTO THE MACRO CALL LINE AND THE            *
 *               MACRO IS EXPANSION IS DELETED.                        *
 *                                                                     *
 *       ASIS  : NO SOURCE CODE EDITING IS DONE AT ALL.                *
 *                                                                     *
 *       PUSH  : SAVE THE ACTUAL VALUE (DATA,LOC OR ASIS) ON A STACK.  *
 *                                                                     *
 *       POP   : REESTABLISH PREVIOUS VALUE FROM STACK                 *
 *                                                                     *
 *       LIST  : LIST ACTUAL VALUE                                     *
 *                                                                     *
 *                                                                     *
 *       THE PROGRAM ALSO ACCEPTS THE VALUES (DATA,LOC OR ASIS) AS     *
 *       A PARAMETER (THE VALUE OF THE PARM KEYWORD IN THE EXEC        *
 *       STATEMENT CALLING SASLIST IN A BATCH JOB).                    *
 *                                                                     *
 *       IN THIS CASE THE VALUE ALSO HAS AN EFFECT TO THE LAYOUT OF    *
 *       THE CROSSREFERENCE: IF ASIS IS SPECIFIED NO LABELS ARE        *
 *       SUPPRESSED.                                                   *
 *                                                                     *
 *       THE PROGRAM DOES ONLY RECOGNIZE THE CONTROL STATEMENTS        *
 *       COPY, ENDCOPY AND SASLIST IF THEY HAVE NOT LABEL.             *
 *       THIS GIVES A SIMPLE METHOD TO INCLUDE SMALL PARTS OF CODE     *
 *       VIA COPY "IN LINE" BY USING A CONDITIONAL ASSEMBLY LABEL      *
 *       IN THE COPY STATEMENT (NORMAL LABELS ARE NOT ALLOWED.)        *
 *       DO NOT FORGET A CORRESPONDING LABEL IN THE ENDCOPY, OR        *
 *       SIMPLY FORGET THE ENDCOPY.                                    *
 *                                                                     *
 * <ENTRY POINTS>:                                                     *
 *                                                                     *
 *       PLISTART                                                      *
 *                                                                     *
 * <INPUT>:                                                            *
 *       A DATASET CONTAINING THE OUTPUT OF THE ASSEMBLER.             *
 *                                                                     *
 * <OUTPUT>:                                                           *
 *       SEE FUNCTION AND DD-STATEMENTS                                *
 *                                                                     *
 *                                                                     *
 * <DD-STATEMENTS/DATA SETS>:                                          *
 *       SYSUT1   :   ASSEMBLY LISTING INPUT                           *
 *       SYSUT2   :   MODIFIED ASSEMBLY OUTPUT                         *
 *       SYSPRINT :   SOME CONTROL MESSAGES                            *
 *       SYSOUT   :   NEEDED BY SORT                                   *
 *       SORTWRK. :   NEEDED BY SORT                                   *
 *       SORTLIB  :   NEEDED BY SORT                                   *
 *                                                                     *
 *                                                                     *
 * <NORMAL EXIT>:                                                      *
 *       VIA RETURN                                                    *
 *                                                                     *
 *                                                                     *
 * <ERROR EXIT>:                                                       *
 *       NONE                                                          *
 *                                                                     *
 * <RETURN CODES>:                                                     *
 *       ALWAYS ZERO                                                   *
 *                                                                     *
 *                                                                     *
 * <EXTERNAL ROUTINES>:                                                *
 *       PGMBEGIN      ADJUSTS THE PARM STRING   "PARM"-->"/PARM"      *
 *       SORT          INVOKED DYNAMICALLY VIA PLISRTD                 *
 *                                                                     *
 * <TABLES/WORK AREAS>:                                                *
 *       NONE                                                          *
 *                                                                     *
 *                                                                     *
 * <ATTRIBUTES>:                                                       *
 *       NOT REUSABLE                                                  *
 *                                                                     *
 *                                                                     *
 * <RESTRICTIONS>:                                                     *
 *                                                                     *
 *       THE MAXIMUM COPY NESTING LEVEL MUST NOT EXCEED 99.            *
 *       BATCH OPTION FOR ASSEMBLER IS NOT SUPPORTED.                  *
 *                                                                     *
 *                                                                     *
 * <AUTHORIZATION REQUIRED>:                                           *
 *       NONE                                                          *
 *                                                                     *
 *                                                                     *
 * <RELATED PROGRAMS>:                                                 *
 *       NONE                                                          *
 *                                                                     *
 *                                                                     *
 * <STORAGE>:                                                          *
 *       PROGRAM:   <X'F000' (RUNTIME SYSTEM INCLUDED)                 *
 *       DYNAMIC:   PLI RUNTIME SYSTEM ROUTINES                        *
 *       BUFFER :   AS MUCH AS POSSIBLE TO ALLOW IN CORE SORT.         *
 *                                                                     *
 *                                                                     *
 * <LOAD MODULE CREATION>:                                             *
 *     SOURCE LANGUAGE      : PL/I                                     *
 *     COMPILE LIBRARIES    : (NO PREPROCESSOR STATEMENTS)             *
 *     COMPILE PARAMETERS   : OPT(2),NEST,X(FULL),A(FULL),AG,STORAGE   *
 *     COMPILE PARAMETERS   :                                          *
 *     LINK-EDIT LIBRARIES  : (STANDARD PLI AND GMD.LINKLIB(PGMBEGIN)  *
 *     LINK-EDIT PARAMETERS : NCAL,LIST                                *
 *     LINK-EDIT INPUT      : SEE GENERATING DECK                      *
 *     DESTINATION LIBRARY  : SYS2.SPTS.LINKLIB(SASLIST)               *
 *                                                                     *
 *     GENERATING DECK      : SYS2.SPTS.CNTL(SASLIST)                  *
 *                                                                     *
 *                                                                     *
 * <STATUS>:                                                           *
 *         CHANGE LEVEL - 6.0             15 JAN 85                    *
 *                                                                     *
 *                                                                     *
 *                                                                     *
 * <AUTHOR>:                                                           *
 *      M. HEINRICI  GMD.IK-BIRLINGHOVEN VERSION 1.0   NOV78 :         *
 *      BASIC VERSION WITHOUT CROSS REFERENCE                          *
 *                                                                     *
 *      C. ZAHLTEN   GMD.IK-DARMSTADT    VERSION 2.0   APR79 :         *
 *      CROSS-REFERENCE WITH LEVELS                                    *
 *                                                                     *
 *      P. SYLVESTER GMD.RZ-BONN         VERSION 2.1   NOV79 :         *
 *      LEVEL CROSS REFERENCE                                          *
 *                                                                     *
 *      P. SYLVESTER GMD.RZ-BONN         VERSION 2.2   MAI80 :         *
 *      SOME ERRORS CORRECTED                                          *
 *                                                                     *
 *      P. SYLVESTER GMD.RZ-BONN         VERSION 3.0   JUN80 :         *
 *      MACRO COMPACTION                                               *
 *                                                                     *
 *      P. SYLVESTER GMD.RZ-BONN         VERSION 3.1   SEP80 :         *
 *      SOME ERRORS CORRECTED                                          *
 *                                                                     *
 *      P. SYLVESTER GMD.RZ-BONN         VERSION 3.2   NOV80 :         *
 *      INPUT AND OUTPUT DDNAMES CHANGED TO SYSUT1 SYSUT2              *
 *                                                                     *
 *      P. SYLVESTER GMD.RZ-BONN         VERSION 3.3   NOV81 :         *
 *      SOME MODS TO ENABLE SASLIST TO WORK ON SLAC OUTPUT             *
 *      SLAC'S ASSOCIATED USING DO NOT WORK                            *
 *                                                                     *
 *      P. SYLVESTER GMD.RZ-BONN         VERSION 4.0   ????? :         *
 *      A LOST VERSION.                                                *
 *                                                                     *
 *      P. SYLVESTER GMD.RZ-BONN         VERSION 5.0   APR84 :         *
 *      SUPPORT FOR ASMH V1, V2 AND SLAC.                              *
 *                                                                     *
 *      P. SYLVESTER GMD.RZ-BONN         VERSION 5.1   APR84 :         *
 *      PARAMETERS FOR SORT CHANGED                                    *
 *                                                                     *
 *      P. SYLVESTER GMD.RZ-BONN         VERSION 5.2   MAY84 :         *
 *      ASSEMBLER STATEMENT LAYOUT ERRORS                              *
 *                                                                     *
 *      P. SYLVESTER GMD.RZ-BONN         VERSION 5.3   JUN84 :         *
 *      ENDCOPY PROCESSING IN E35X WAS WRONG                           *
 *                                                                     *
 *      P. SYLVESTER GMD.RZ-BONN         VERSION 5.4   JUL84 :         *
 *      PAGE NUMBERS IN CHAPTER CROSS REFERENCE WERE WRONG             *
 *      SECCND TITLE LINE WRONG WHEN NO TITLE CMD AFTER COPY           *
 *                                                                     *
 *      P. SYLVESTER GMD.RZ-BONN         VERSION 5.5   AUG84 :         *
 *      SOME PROBLEMS INTRODUCED BY 5.3 AND 5.4 SOLVED                 *
 *                                                                     *
 *      P. SYLVESTER GMD.RZ-BONN         VERSION 6.0   JAN85 :         *
 *      SUPPORT FOR SLAC ASM VERSION 2.9                               *
 *                                                                     *
 *      P. SYLVESTER GMD.RZ-BONN         VERSION 6.1   AUG87 :         *
 *      66 LINES PER PAGE                                              *
 *                                                                     *
 *                                                                     *
 *- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --*/
     %PAGE ;
 SASLIST: PROC(PARM) OPTIONS (MAIN) REORDER ;
                                        /***************************/
                                        /* PARAMETER               */
                                        /***************************/
    DCL PARM CHAR(100) VAR ;
                                        /***************************/
                                        /* IDENTIFICATION          */
                                        /***************************/
    DCL COPYRIGHT CHAR(100) STATIC
    INIT('SASLIST VERS 6.1 87-08-16 COPYRIGHT GMD-Z1.BN');
    PUT SKIP EDIT
    ('SASLIST VERS 6.1 87-08-16 COPYRIGHT GMD-Z1.BN')(A);
    DCL TITELZSTRSAS  CHAR(124) ;
          TITELZSTRSAS='0'||(98)' '||'SASLIST VERS 6.1 87-08-16' ;
                                                             %SKIP(2) ;
                                        /***************************/
                                        /* DAS FAST BILLIGSTE      */
                                        /* ERRORHANDLING WO GIBT   */
                                        /***************************/
    ON ERROR SNAP BEGIN ;
       ON ERROR SYSTEM ;
       PUT SKIP DATA(COPYSCH,COPYSCH1) ;
       PUT SKIP DATA(TITELZEILESCH,TITELZEILESCH1) ;
       PUT SKIP DATA(OUTREC) ;
       PUT SKIP DATA(INREC) ;
       IF LASTREC ¬= NULL THEN
          PUT SKIP EDIT('FIRSTREC->RECORD.CONTENTS=''',
                FIRSTREC->RECORD.CONTENTS,''' ;')(A,A,A) ;
       CALL DUMPREC ;
       STOP ;
    END ;
                                        /***************************/
                                        /* DATEIDEKLARATION        */
                                        /* DATEI MIT ASSEMBLERLIST */
                                        /***************************/
    DCL SYSPRINT FILE EXTERNAL PRINT ;
    DCL IN FILE RECORD ;
    DCL OUT FILE RECORD
        ENVIRONMENT(FB RECSIZE(124) BLKSIZE(6200) CTLASA CONSECUTIVE) ;
                                        /***************************/
                                        /* OEFFNE DATEIEN IN, OUT  */
                                        /***************************/
    OPEN FILE(IN) INPUT TITLE('SYSUT1');
    OPEN FILE(OUT) OUTPUT TITLE('SYSUT2');
                                                             %SKIP(2);
    ON ENDFILE (IN) EOF = TRUE ;
                                                             %PAGE;
                                        /***************************/
                                        /*   BUILTIN FUNCTIONS     */
                                        /***************************/
    DCL (ADDR,
         ALLOCATION,
         INDEX,
         LENGTH,
         MOD,
         NULL,
         ONSOURCE,
         ONCHAR,
         PLIRETC,
         PLISRTD,
         ROUND,
         STRING,
         SUBSTR,
         UNSPEC,
         VERIFY)      BUILTIN ;
                                                             %PAGE ;
                                        /***************************/
                                        /* LIST CONTROL DEFINITION */
                                        /*  DEFAULT INITIALIZATION */
                                        /***************************/
    DCL LISTCONTROL CHAR(10) VAR CTL ;
        ALLOCATE LISTCONTROL ;
        LISTCONTROL='CODE';
         BEGIN ;
            DCL WERT CHAR(8) INIT(PARM), I BIN FIXED(31) ;
            DO I=1 TO NUMBEROFLISTCTLVALUES ;
               IF LISTCTLVALUES(I) = WERT THEN
               DO ;
               CALL SETLISTCONTROL(PARM) ;
               I = NUMBEROFLISTCTLVALUES ;
               END ;
            END ;
         END ;
                                        /***************************/
                                        /* POSSIBLE VALUES         */
                                        /***************************/
    DCL LISTCTLVALUES(7) CHAR(8) STATIC VAR INIT(
            'LOC',                      /*    LIST LOCATION        */
            'DATA',                     /*    LIST DATA            */
            'CODE',                     /*    LIST CODE(NOT IMPL.) */
            'ASIS',                     /*    LIST ASIS            */
            'LIST',                     /*    DUMP STATUS          */
            'PUSH',                     /*    PUSH LIST CONTROL    */
            'POP' ) ;                   /*    POP  LIST CONTROL    */
    DCL NUMBEROFLISTCTLVALUES INIT(7) BIN FIXED(31) STATIC ;
                                                             %SKIP(3) ;
                                        /***************************/
                                        /* SET LIST CONTROL VALUE  */
                                        /***************************/
    SETLISTCONTROL: PROC(WERT) ;
       DCL WERT CHAR(8) ,I BIN FIXED(31) ;
         DO I=1 TO NUMBEROFLISTCTLVALUES ;
         IF LISTCTLVALUES(I) = WERT THEN
         DO ;
           IF   I>0 & I<5 THEN  LISTCONTROL = WERT ;
           ELSE IF I = 5  THEN  CALL LISTLISTCONTROL ;
           ELSE IF I = 6  THEN  CALL PUSHLISTCONTROL ;
           ELSE IF I = 7  THEN  CALL POPLISTCONTROL ;
           RETURN ;
         END ;
       END ;
       CALL FEHLER('002','INVALID LIST CONTROL VALUE: ' || WERT
       || ', IGNORED') ;
    END SETLISTCONTROL ;
                                                             %SKIP(3) ;
                                        /***************************/
                                        /* POP LIST CONTROL VALUE  */
                                        /***************************/
    LISTLISTCONTROL: PROC ;
          DCL C PIC'ZZZZ9' ;
          C = ALLOCATION(LISTCONTROL) ;
          CALL MELDUNG('000',
          'STATUS OF LISTING CONTROL: ' || LISTCONTROL ||
          ' AT LEVEL: '      || C           ) ;
    END LISTLISTCONTROL ;
                                                           %SKIP(3) ;
                                        /***************************/
                                        /* POP LIST CONTROL VALUE  */
                                        /***************************/
    POPLISTCONTROL: PROC ;
       IF ALLOCATION(LISTCONTROL) = 1 THEN
          CALL FEHLER('001','POP INVALID, LIST CONTROL AT TOP LEVEL') ;
       ELSE
          FREE LISTCONTROL ;
    END POPLISTCONTROL ;
                                                             %SKIP(3) ;
                                        /***************************/
                                        /* PUSH LIST CONTROL VALUE */
                                        /***************************/
    PUSHLISTCONTROL: PROC ;
       DCL C CHAR(10) VAR ;
       C = LISTCONTROL ;
       ALLOCATE LISTCONTROL ;
       LISTCONTROL = C ;
    END PUSHLISTCONTROL ;
                                                             %PAGE ;
                                        /***************************/
                                        /*   SATZBEREICHE          */
                                        /***************************/
    DCL INREC  CHAR(121) INIT(' '),
        OUTREC CHAR(134) INIT(' '),
       (MSSG1,MSSG2,MSSG3,MSSG4,MSSG5,MSSG6,MSSG7) CHAR(124) VARYING,
       (SRTMSSG1,SRTMSSG2,SRTMSSG3) CHAR(124) VARYING ;
 %SKIP(3) ;
                                        /***************************/
                                        /*    ZAEHLER,SCHALTER     */
                                        /*    FUER:                */
                                        /*   (DATEIENDE,           */
                                        /*    TITELZEILE1 GEFUNDEN */
                                        /*    ERWARTE TITELZEILE2, */
                                        /***************************/
    DCL (EOF,TITELZEILESCH,TITELZEILESCH1,
         ERWTZ2) BIT(1) INIT('0') ;
                                        /***************************/
                                        /* SCHALTER FUER:          */
                                        /* SATZ BEREITS GELESEN    */
                                        /***************************/
    DCL RECORDIN      BIT(1) INIT('0'B) ;
                                        /***************************/
                                        /* COPY GEFUNDEN ?         */
                                        /***************************/
    DCL COPYSCH       BIT(1) INIT('0'B) ;
    DCL COPYSCH1      BIT(1) INIT('0'B) ;
                                        /***************************/
                                        /* INFORMATIONSSATZ ?      */
                                        /***************************/
    DCL TZINFOSCH     BIT(1) INIT('0'B) ;
                                        /***************************/
                                        /* ENDCOPY INFO SATZ ?     */
                                        /***************************/
    DCL TZECPYSCH     BIT(1) INIT('0'B) ;
                                        /***************************/
                                        /* SATZ = LEERZEILE ?      */
                                        /***************************/
    DCL TZWECHSELSCH  BIT(1) INIT('0'B) ;
                                        /***************************/
                                        /* WECHSEL IN DER TITELZ.? */
                                        /***************************/
    DCL EMPTYSCH      BIT(1) INIT('0'B) ;
                                        /***************************/
                                        /* ZU VERARBEITENDER SATZ ?*/
                                        /***************************/
    DCL SATZSCH       BIT(1) INIT('0'B) ;
                                        /***************************/
                                        /* ASM FOLGEZEILE    ?     */
                                        /***************************/
    DCL ASMCONTSCH    BIT(1) INIT('0'B) ;
                                        /***************************/
                                        /* ASM FEHLERZEILE   ?     */
                                        /***************************/
    DCL ASMERRORSCH   BIT(1) INIT('0'B) ;
                                        /***************************/
                                        /* ASM MACROZEILE    ?     */
                                        /***************************/
    DCL ASMMACROSCH   BIT(1) INIT('0'B) ;
                                        /***************************/
                                        /* ASM DATAZEILE     ?     */
                                        /***************************/
    DCL ASMLTORGSCH   BIT(1) INIT('0'B) ;
                                        /***************************/
                                        /* ASM LTORGZEILE    ?     */
                                        /***************************/
    DCL ASMSPTSMACRO  BIT(1) INIT('0'B) ;
                                        /***************************/
                                        /* **SPTS MACRO      ?     */
                                        /***************************/
    DCL ASMDATASCH    BIT(1) INIT('0'B) ;
                                        /***************************/
                                        /* ASM BUFFER LEEREN ?     */
                                        /***************************/
    DCL ASMBUFFERSCH  BIT(1) INIT('0'B) ;
                                                             %SKIP(4) ;
                                        /***************************/
                                        /*       WAHRHEITSWERTE   */
                                        /***************************/
    DCL FALSE BIT(1) STATIC INIT('0'B),
        TRUE  BIT(1) STATIC INIT('1'B) ;
                                        /***************************/
                                        /*       VARIABLE,         */
                                        /*       KLEINE BEREICHE   */
                                        /*                         */
                                        /* CONTROL CHARACTER       */
                                        /***************************/
    DCL (ACC,MCC)    CHAR(1) INIT(' '),
        TITELMCC     CHAR(1) INIT(UNSPEC('00001001'B)) ;
    DCL NEWPGNO      PIC'ZZZZZ9' INIT(0),
        LETZTE_STMT_NR BIN FIXED(20) INIT(0),
        WERT         BIN FIXED(30) INIT(0),
                                        /***************************/
                                        /* OPERATION DES ASSEMBLER-*/
                                        /* STATEMENTS              */
                                        /***************************/
        OPERATION    CHAR(8) INIT(' '),
                                        /***************************/
                                        /* NAME DES COPYS          */
                                        /***************************/
        CNAM         CHAR(8) INIT(' ') ;
                                        /***************************/
                                        /* MAXIMALE ANZAHL FUER    */
                                        /* ZEILENANZAHL PRO DRUCK  */
                                        /* SEITE                   */
                                        /***************************/
    DCL LNMAX             FIXED BIN(15) INIT(66) ;
                                                             %SKIP(3) ;
                                        /***************************/
                                        /*        ZAEHLER (U.A.)   */
                                        /*                         */
                                        /* RETURNCODE FUER PLISRTD */
                                        /***************************/
    DCL RC                FIXED BIN (31,0) INIT(0),
                                        /***************************/
                                        /* ZAEHLER FUER TABELLE,   */
                                        /* STACK,AKTUELLES KAPITEL,*/
                                        /* VORHERIGES KAPITEL,     */
                                        /* AKTUELLE EBENE          */
                                        /***************************/
       (TABCT,STACKCT,KAP,LEV,I)
                  FIXED BIN(15) INIT(1),
       (KAPALT)
                  FIXED BIN(15) INIT(0),
                                        /***************************/
                                        /* PROGRAMLINECOUNTER      */
                                        /*      ZAEHLLT ZEILEN DER */
                                        /*      GANZEN AUSGABELISTE*/
                                        /* PAGELINECOUNTER         */
                                        /*      ZAEHLLT ZEILEN DER */
                                        /*      DRUCKERSEITE       */
                                        /***************************/
       (PRLNCT,PGLNCT)   FIXED BIN(31)    INIT(0),
       (MISCYCT)   FIXED BIN(15)    INIT(0) ;
                                        /**************************/
                                        /* CROSSREF.-SPEICHER     */
                                        /**************************/
    DCL FELD(2000)    FIXED BIN(31) INIT(0) ;
    DCL BFELD(2000)    BIT(1) INIT('0'B) ;
                                                             %PAGE ;
                                        /***************************/
                                        /*      STRUKTUR           */
                                        /*      UEBER INREC        */
                                        /***************************/
    DCL 1 INSTR BASED ,
           2 CC   CHAR(1),
           2 LOC  CHAR(33),
           2 ZW1  CHAR(1),
           2 LVSTMT,
              3 STMT CHAR(5),
           2 ZW2  CHAR(1),
           2 REST CHAR(80) ;
                                        /***************************/
                                        /*     STRUKTUR            */
                                        /*     UEBER OUTREC        */
                                        /*                         */
                                        /* AUFBAU EINES SATZES MIT */
                                        /* ASSEMBLERSTATEMENTS     */
                                        /***************************/
    DCL 1 ASSSTR DEF OUTREC,
           2 CC   CHAR(1),
           2 LOC  CHAR(33),
           2 ZW1  CHAR(1),
           2 LVSTMT,
              3 LV   PIC'99',
              3 ZW4  CHAR(1),
              3 STMT PIC'99999',
           2 ZW2  CHAR(1),
           2 REST CHAR(80) ;
                                        /***************************/
                                        /*      STRUKTUR           */
                                        /*      UEBER OUTREC       */
                                        /*                         */
                                        /* SORTIERKRITERIUM        */
                                        /***************************/
    DCL 1 SORTKRIT DEF OUTREC POS(125),
          2 S    PIC'99',
          2 LV   PIC'99',
          2 ZZ   PIC'999999' ;
                                                             %PAGE ;
                                        /***************************/
                                        /*      STRUKTUR           */
                                        /*      UEBER OUTREC       */
                                        /*                         */
                                        /* FEHLERMELDUNGEN         */
                                        /***************************/
    DCL 1 FEHLERSTR DEF OUTREC ,
          2  ANFANG CHAR(7) ,
          2  NUMMER CHAR(3) ,
          2  AUGENFANG CHAR(17) ,
          2  MESSAGE CHAR(97) ;

                                        /***************************/
                                        /* FEHLERMELD. AUSGEBEN?   */
                                        /***************************/
    DCL FEHLERSCH     BIN FIXED(15) INIT(0) ;
    DCL FEHLERTOTAL   BIN FIXED(15) INIT(0) ;
    DCL MELDUNGTOTAL   BIN FIXED(15) INIT(0) ;
    DCL FEHLERMELDUNG(11) CHAR(97) VAR INIT( (11)(1)'') ;
    DCL FEHLERNUMMER (11) CHAR(3)      INIT( (11)(1)'000') ;
                                            /*************************/
                                            /* W A R N U N G         */
                                            /* AUSGABE VON MELDUNGEN */
                                            /*************************/
    MELDUNG: PROC(NUMMER,MESSAGE) ;
       DCL NUMMER CHAR(3) ;                 /* FEHLER NUMMER         */
       DCL MESSAGE CHAR(97) VAR ;           /* FEHLER TEXT           */
       CALL FEHLER(NUMMER,MESSAGE) ;
       FEHLERTOTAL = FEHLERTOTAL - 1 ;
       MELDUNGTOTAL = MELDUNGTOTAL + 1 ;
    END MELDUNG ;
                                            /*************************/
                                            /* F E H L E R           */
                                            /* AUSGABE VON FEHLER-   */
                                            /* MELDUNGEN             */
                                            /*                       */
                                            /*************************/
    FEHLER: PROC(NUMMER,MESSAGE) ;
       DCL NUMMER CHAR(3) ;                 /* FEHLER NUMMER         */
       DCL MESSAGE CHAR(97) VAR ;           /* FEHLER TEXT           */

       DCL AUSGELASSENE PIC '999' ;         /* NICHT AUSGEB. FEHLER  */
       DCL J BIN FIXED(31) ;                /* LAUFVARIABLE          */

       FEHLERSCH = FEHLERSCH + 1 ;
       FEHLERTOTAL = FEHLERTOTAL + 1 ;
                                            /*************************/
                                            /* ZU VIELE FEHLER ?     */
                                            /*************************/
       IF FEHLERSCH > 10 THEN DO ;
          AUSGELASSENE = FEHLERSCH - 10 ;
          FEHLERMELDUNG(1) = 'MORE THEN 10 ERRORS IN STATEMENT, '
                           || AUSGELASSENE || ' MESSAGES IGNORED' ;
       END ;
                                            /*************************/
                                            /* MELDUNG SPEICHERN     */
                                            /*************************/
       ELSE DO ;
                                            /*************************/
                                            /* VORH. MELD. VERSCHIEB.*/
                                            /*************************/
          DO J = FEHLERSCH - 1 TO 1 BY -1 ;
             FEHLERMELDUNG(J+1) = FEHLERMELDUNG(J) ;
             FEHLERNUMMER(J+1)  = FEHLERNUMMER(J) ;
          END ;
                                            /*************************/
                                            /* NEUE MELD. EINTRAGEN  */
                                            /*************************/
          FEHLERMELDUNG(1) = MESSAGE ;
          FEHLERNUMMER(1)  = NUMMER ;
       END ;
    END FEHLER ;
                                                             %PAGE ;
                                        /****************************/
                                        /* STRUKTUR DER             */
                                        /* AUSGABESAETZE AUS        */
                                        /* DER CROSSREFERECE        */
                                        /****************************/
    DCL 1 XREFSATZ(200),
          2 CC CHAR(1) ,
          2 ANFANG CHAR(23) ,
          2 DEF PIC'ZZZ.ZZZZZ' ,
          2 ZW1 CHAR(1) ,
          2 REF(10) PIC'ZZZ.ZZZZZ' ;
                                        /****************************/
                                        /* UNDEFINED LABEL         */
                                        /*                         */
                                        /****************************/
    DCL UNDEFINEDXREF CHAR(32) BASED(ADDR(XREFSATZ(1).ANFANG)) ;
    XREFSATZ    = '' ;
    DCL 1 REF BASED ,
          2 LEV CHAR(3) ,
          2 COLON CHAR(1) ,
          2 STMT CHAR(5) ;
 %PAGE ;
                                        /***************************/
                                        /*      VERGLEICHSFELD     */
                                        /*     FUER TITELZEILE1    */
                                        /***************************/
    DCL TITELVGL CHAR(112) INIT(' ') ;
                                        /***************************/
                                        /*      STRUKTUR           */
                                        /*      TITELZEILE1        */
                                        /***************************/
    DCL TITELZSTR1  CHAR(124) INIT(' ') ;
                                        /***************************/
                                        /*      MODUL-FELD         */
                                        /***************************/
    DCL TITELMODUL CHAR(8) DEF TITELZSTR1 POS(2) ;
                                        /***************************/
                                        /*      STRUKTUR           */
                                        /*      TITELZEILE2        */
                                        /***************************/
    DCL TITELZSTR2  CHAR(124) INIT(' ') ;
    DCL TITELZSTR2A CHAR(99) DEF TITELZSTR2 ;
    DCL TITELZSTR2B CHAR(25) DEF TITELZSTR2 POS(100) ;
    DCL 1 TITELZEILE1 DEF TITELZSTR1,
          2 TEXT CHAR(119),
          2 PGNO CHAR(5) ;
                                         /************************/
                                         /* INFORMATIONSZEILE    */
                                         /* FUER TITELZSTR2      */
                                         /* ENTHAELT DIE DATEN   */
                                         /* FUER EINSCHUB IN     */
                                         /* TITELZEILE2          */
                                         /************************/
    DCL TZINFO2 CHAR(124) INIT(' ') ;
    DCL 1 TZINFOSTR DEF TZINFO2,
          2 KENNZ CHAR(4),
          2 LVNM CHAR(8),
          2 CFNM CHAR(8),
          2 LVSTMTNR,
            3 LV CHAR(2),
            3 ZW CHAR(1),
            3 STMT PIC'99999',
          2 TABCT PIC'ZZZZ9',
          2 REST CHAR(91) ;
    TZINFOSTR.LV = '1' ;
    TZINFOSTR.STMT = '00000' ;
 %PAGE ;
                                        /***************************/
                                        /*     STRUKTUR            */
                                        /*     TITELZEILE2         */
                                        /***************************/
    DCL 1 TITELZEILE2 DEF TITELZSTR2,
          2 TEXT CHAR(35),
          2 LVSTMT,
            3 LV     CHAR(2),
          2 TEXT2     CHAR(8),
          2 EINSCHUB,
            3 ZW10   CHAR(3),
            3 TXT1   CHAR(6),
            3 LVNM   CHAR(8),
            3 ZW6    CHAR(3),
            3 TXT2   CHAR(13),
            3 CFNM   CHAR(8),
            3 ZW7    CHAR(1),
            3 LVSTMTNR,
              4 LV  CHAR(2),
              4 ZW8   CHAR(1),
              4 STMT  CHAR(5),
          2 ZW9 CHAR(3),
          2 REST   CHAR(26) ;
                                            /*************************/
                                            /* STRUKTUR              */
                                            /* STACK ZUM EINTRAGEN   */
                                            /* DER AKTUELLEN         */
                                            /* INFORMATION UEBER     */
                                            /* LEVEL,-NAME,STMTNR    */
                                            /*************************/
    DCL 1 STACK(99),
          2 LVNM  CHAR(8) INIT(' '),
          2 LV     BIN FIXED(15) INIT(1),
          2 STMTNR CHAR(5) INIT('0') ;
                                            /*************************/
                                            /* TABELLE ZUM SPEICHERN */
                                            /* DER ZEILEN- UND ZUGE- */
                                            /* HOERIGEN LEVELNUMMERN */
                                            /*************************/
    DCL 1 TABELLE(600),
          2 LVNM CHAR(8) INIT('MAIN'),
          2 LV    BIN FIXED(15) INIT(1),
          2 STNRA BIN FIXED(20) INIT(0),
          2 STNRB BIN FIXED(20) INIT(0),
          2 PAGE  BIN FIXED(31) INIT(1) ;
    DCL 1 TABREC,
          2 CC CHAR(1),
          2 TABTEXT CHAR(123) INIT(' ') ;
    DCL   TABMAX STATIC BIN FIXED(31) INIT(600) ;
 %PAGE ;
                                            /*************************/
                                            /* BEGINN                */
                                            /* DER HAUPTPROZEDUR     */
                                            /* SASLIST               */
                                            /* TEXTE DER MELDUNGEN   */
                                            /*************************/
    MSSG1 = 'FILE SYSUT1 WAS EMPTY.';       /* ENDFILE = TRUE        */
    MSSG2 = 'RETURN CODE AFTER CLOSING '||  /* ENDE MELDUNG          */
            'DATA SETS' ;
    MSSG3 = 'UNEXPECTED END OF FILE IN E15X' ;
    MSSG4 = 'INTERNAL ERROR IN TITLE LINE PROCESSSING ';
    MSSG5 = 'INTERNAL ERROR IN LINE PROCESSING ';
    MSSG6 = ' MISSING ENDCOPY-STATEMENTS.' ;
    MSSG7 = ' TOO MANY ENDCOPY-STATEMENTS FOUND ' ;
    SRTMSSG1 = 'INTERNAL SORT SUCCESSFUL';   /* PLISRTD(RC) = 0      */
    SRTMSSG2 = 'INTERNAL SORT UNSUCCESSFUL' || /* RC = 16           */
               ', SORT RETURN CODE 16';
    SRTMSSG3 = 'INTERNAL SORT UNSUCCESSFUL' ||  /* RC ¬= 0 & 16   */
               ', SORT RETURN CODE ';
                                            /*************************/
                                            /* INIT DER              */
                                            /* SORTKRITERIEN         */
                                            /*************************/
    SORTKRIT.S=SORTKRIT.LV=SORTKRIT.ZZ=0 ;
 %PAGE ;
                                            /*************************/
                                            /* 1. SATZ EINLESEN      */
                                            /*************************/
    READ FILE(IN) INTO(INREC) ;
    MCC = ADDR(INREC)->INSTR.CC ;
                                            /*************************/
                                            /* IST DATEI LEER        */
                                            /*************************/
    IF EOF
    THEN PUT SKIP EDIT(MSSG1)(A) ;
                                            /*************************/
                                            /* AUFRUF SORTPROGRAMM   */
                                            /*************************/
    ELSE DO ;
       DCL MAXSTOR FIXED BIN(31) ;
       UNSPEC(MAXSTOR) = '00'B || UNSPEC('MAX') ;
       CALL PLISRTD(' SORT FIELDS=(125,10,CH,A),FILSZ=E30000 ',
                    ' RECORD TYPE=F,LENGTH=(134) ',
                    MAXSTOR,RC,E15X,E35X) ;
                                            /*************************/
                                            /* ABFRAGE DES RC VOM    */
                                            /* SORTPROGRAMM          */
                                            /* RC = 0    SORT OK     */
                                            /* RC = 16   SORT FAILED */
                                            /* RC ¬= 0   INVALID SORT*/
                                            /*************************/
       IF RC = 0  THEN PUT SKIP EDIT(SRTMSSG1)(A) ;
       IF RC = 16 THEN PUT SKIP EDIT(SRTMSSG2||RC)(A) ;
       ELSE IF RC ¬= 0 THEN
          PUT SKIP EDIT(SRTMSSG3||RC)(A) ;
                                            /*************************/
                                             /* ENDE DES ELSE ZWEIG  */
                                             /* VON ABFRAGE AUF DATEI*/
                                             /* ENDE                 */
                                            /*************************/
    END ;
                                            /*************************/
                                            /* SCHLIESSEN DER DATEIEN*/
                                            /*************************/
    CLOSE FILE(IN) ;
    CLOSE FILE(OUT) ;
                                            /*************************/
                                            /* RETURNCODE VON       */
                                            /* PLISRTD              */
                                            /*************************/
    CALL PLIRETC(RC) ;
    IF RC=0 THEN
    PUT SKIP EDIT('DATASETS SUCCESSFULLY CLOSED')(A);
    ELSE
    PUT SKIP EDIT(MSSG2||RC)(A) ;
                                            /*************************/
                                             /* ENDE DER HAUPTPROZEDUR*/
                                             /*      SASLIST          */
                                            /*************************/
       %PAGE ;
                                            /*************************/
                                            /*    E 1 5 X            */
                                            /*        AUFGERUFEN VON */
                                            /*        PLISRTD        */
                                            /*************************/
    E15X: PROC RETURNS(CHAR(134)) ;
                                            /*************************/
                                            /* WAR TITELZEILE 1 GE   */
                                            /*FUNDEN, MUSS GEPUFFERTE*/
                                            /* TITELZEILE AN PLISRTD */
                                            /* UEBERGEBEN WERDEN     */
                                            /*************************/
       IF TITELZEILESCH
       THEN DO ;
          SUBSTR(OUTREC,1,124) = TITELZSTR2 ;
          TITELZEILESCH = FALSE ;
          TITELZEILESCH1 = FALSE ;
                                            /*************************/
                                            /* WEITERE EINGABE AN    */
                                            /* SORT                  */
                                            /*************************/
          PRLNCT = PRLNCT + 1 ;
          SORTKRIT.ZZ = PRLNCT ;
          CALL PLIRETC(12) ;
          RETURN (OUTREC) ;
       END ;
                                           /*************************/
                                           /* WENN COPY GEFUNDEN,    */
                                           /* DANN INFOZEILE         */
                                           /* AUF NEUESTEN STAND     */
                                           /* BRINGEN UND PLISRTD    */
                                           /* UEBERGEBEN             */
                                           /*************************/
       IF COPYSCH
       THEN DO ;
          SORTKRIT.LV = LEV ;
          SUBSTR(OUTREC,1,124) = TZINFO2 ;
          COPYSCH = FALSE ;
          COPYSCH1 = FALSE ;
                                            /*************************/
                                            /* WEITERE EINGABE AN    */
                                            /* SORT                  */
                                            /*************************/
          PRLNCT = PRLNCT + 1 ;
          SORTKRIT.ZZ = PRLNCT ;
          CALL PLIRETC(12) ;
          RETURN(OUTREC) ;
       END ;
                                           /*************************/
                                           /* ZUSAETZLICHE AUSGABE   */
                                           /* VON FEHLERMELDUNGEN    */
                                           /*************************/
       IF FEHLERSCH > 0
       THEN DO ;
          IF FEHLERSCH > 11 THEN FEHLERSCH = 11 ;
          SORTKRIT.LV = LEV ;
          FEHLERSTR.ANFANG  = '    SAS'              ;
          FEHLERSTR.NUMMER = FEHLERNUMMER(FEHLERSCH) ;
          FEHLERSTR.AUGENFANG = '  ** SASLIST **  '  ;
          FEHLERSTR.MESSAGE = FEHLERMELDUNG(FEHLERSCH) ;
          FEHLERSCH = FEHLERSCH - 1 ;
                                            /*************************/
                                            /* WEITERE EINGABE AN    */
                                            /* SORT                  */
                                            /*************************/
          PRLNCT = PRLNCT + 1 ;
          SORTKRIT.ZZ = PRLNCT ;
          CALL PLIRETC(12) ;
          RETURN(OUTREC) ;
       END ;
                                                              %PAGE ;
                                            /*************************/
                                            /* VERARBEITBAREN SATZ   */
                                            /*    SUCHEN :           */
                                            /*************************/
       SATZSCH = FALSE ;
       DO WHILE (¬SATZSCH ) ;
                                            /*************************/
                                            /* LESEN WENN NOCH KEIN  */
                                            /* SATZ IM SPEICHER STEHT*/
                                            /*************************/
          IF ¬RECORDIN THEN CALL  GETLINE ;

          IF EOF THEN DO ;
                                            /*************************/
                                            /* WENN EBENENSTRUKTUR   */
                                            /* NICHT IN ORDNUNG, END */
                                            /* COPYS FEHLEN, SCHREIBE*/
                                            /* MELDUNG               */
                                            /*************************/
             IF STACKCT > 1 THEN DO ;
                                            /*************************/
                                            /* STACKCT IST MIT 1 INIT*/
                                            /* ==> STACKCT IST EINS  */
                                            /* GROESSER ALS LEVEL    */
                                            /*************************/
                STACKCT = STACKCT - 1 ;
                                            /*************************/
                                            /* ENDCOPY ZUWENIG       */
                                            /*************************/
                PUT SKIP EDIT(STACKCT,MSSG6)(A) ;
             END ;
             ELSE DO ;
                                            /*************************/
                                            /* ENDCOPY ZUVIEL        */
                                            /*************************/
                IF MISCYCT > 0
                THEN PUT SKIP EDIT(MISCYCT,MSSG7)(A) ;
             END ;
             TZINFOSTR.LVNM = TABELLE.LVNM(1) ;
             TZINFOSTR.CFNM = ' ' ;
             TZINFOSTR.LVSTMTNR.LV = '01' ;
             TZINFOSTR.LVSTMTNR.STMT = '00000' ;
                                            /*************************/
                                            /* ENDE DER EINGABE AN   */
                                            /* SORT                  */
                                            /*************************/
             CALL PLIRETC(8) ;
                                            /*************************/
                                            /* SATZSCH SETZEN        */
                                            /*************************/
             SATZSCH = TRUE ;
          END ;
                                                            %PAGE ;
          ELSE DO ;
                                            /*************************/
                                            /* FUER NEU GELESENEN    */
                                            /* SATZ SORTIERKRITERIEN */
                                            /* AUFBAUEN              */
                                            /*************************/
             SORTKRIT.LV = LEV ;
                                                             %PAGE ;
                                           /***************************/
                                           /*   SATZ = TITELZEILE1?   */
                                           /***************************/
             SELECT ;
                                           /***************************/
                                           /* VERARBEITEN TITELZEILEN */
                                           /***************************/
                WHEN (ADDR(INREC)->INSTR.CC = '1') CALL TITELVER ;
                                           /***************************/
                                           /* KEINE TITELZEILE        */
                                           /* ZEILENVERARBEITUNG      */
                                           /***************************/
                OTHER
                IF KAPALT = KAP THEN CALL ZEILVER ;
                ELSE  CALL KAPCHNG ;
             END ;

                                           /***************************/
                                           /* WEITERE EINGABE AN      */
                                           /* PLISRTD                 */
                                           /***************************/
             CALL PLIRETC(12) ;
          END ;
       END ;
                                            /**************************/
                                            /* AUSGABESAETZE ZAEHLEN  */
                                            /* UND SORT.KRIT. AUFBAUEN*/
                                            /**************************/
       PRLNCT = PRLNCT + 1 ;
       SORTKRIT.ZZ = PRLNCT ;
       RETURN(OUTREC) ;
    END E15X ;
 %PAGE ;
                                            /*************************/
                                            /* T I T E L V E R       */
                                            /* AUSWAHL DES ENTSPRECH */
                                            /* ENDEN ZU VERARBEITEN  */
                                            /* DEN KAPITEL           */
                                            /*************************/
    TITELVER: PROC ;
                                              /************************/
                                              /* KAPITELWECHSEL WIRD  */
                                              /* IN ZEILE 4 ERKANNNT  */
                                              /************************/
       DCL LINECOUNT BIN FIXED(31) INIT(1);
                                            /**************************/
                                            /* ZU UNTERDRUECKENDER    */
                                            /*      TITEL             */
                                            /**************************/
       IF (SUBSTR(INREC,113,4)¬='PAGE') THEN RETURN ;
       IF TITELVGL ¬= SUBSTR(INREC,1,112) THEN DO;
                                            /**************************/
                                            /* ZU VERARBEITENDER TITEL*/
                                           /**************************/
          TITELZEILESCH1 = TRUE ;
          TITELZSTR1 = INREC ;
          TITELVGL = SUBSTR(INREC,1,112) ;
       END ;
                                           /***************************/
                                           /* DA 1.TITELZEILE SORTKRIT*/
                                           /* 2.TITELZEILE BRAUCHT,   */
                                           /* LESEN DER 2. TITELZEILE */
                                           /***************************/

                                              /************************/
                                              /* UEBERLESEN SLAC      */
                                              /* USING ZEILEN         */
                                              /************************/
       DO UNTIL (LINECOUNT = 4);
          CALL GETLINE ;
          IF      ACC =  ' ' THEN LINECOUNT = LINECOUNT + 1;
          ELSE IF ACC =  '0' THEN LINECOUNT = LINECOUNT + 2;
          ELSE IF ACC =  '-' THEN LINECOUNT = LINECOUNT + 3;
          ELSE IF ACC ¬= '+' THEN LINECOUNT = 4;
       END ;
       RECORDIN = FALSE ;
       IF SUBSTR(UNSPEC(MCC),1,1) ¬= '1'B THEN
          MCC = TITELMCC ;
                                              /************************/
                                              /* KAPITEL ERKENNEN     */
                                              /************************/
       SELECT ;
          WHEN (SUBSTR(INREC,2,12)='SYMBOL   TYP') DO;
             KAP = 1 ;
             SUBSTR(TITELZSTRSAS,69,30) = SUBSTR(INREC,66,30);
          END ;
          WHEN (SUBSTR(INREC,2,10)='          ' & KAP = 1);
          WHEN (SUBSTR(INREC,4,10)='LOC  OBJEC')      KAP = 2 ;
          WHEN (SUBSTR(INREC,3,6)='POS.ID')           KAP = 3 ;
          WHEN (SUBSTR(INREC,2,14)='SYMBOL    LEN ') DO ;
             KAP = 4 ;
             SHORTREF = SUBSTR(INREC,26,9) = 'DEFN  REF' ;
          END ;
          WHEN (SUBSTR(INREC,2,10)='          ')      KAP = 6 ;
          OTHER DO ;
             PUT SKIP EDIT(MSSG4)(A) ;
             PUT SKIP EDIT(INREC)(A) ;
          END ;
       END ;

       IF KAP ¬= KAPALT THEN TITELZEILESCH1 = FALSE ;

       SUBSTR(INREC,66,30) = ' ';
       IF KAP = 1 & TITELMODUL ¬= '' THEN
          TABELLE.LVNM(1) = TITELMODUL ;
                                            /*************************/
                                            /* KAPITEL = 2 ?         */
                                            /* AUFBEREITEN DER INFO  */
                                            /* ZEILE FUER ASSEMBLER  */
                                            /* SEITE                 */
                                            /* TITELZEILE2 TEXT      */
                                            /* MIT AKTUELLEN INFOR   */
                                            /* MATIONEN AUFFUELLEN   */
                                            /*************************/
       IF KAP = 2
       THEN DO ;
          TITELZEILE2.TEXT = SUBSTR(INREC,1,35) ;
          TITELZEILE2.TEXT2 = SUBSTR(INREC,36,8) ;
          TITELZEILE2.REST = SUBSTR(INREC,96,26) ;
                                            /*************************/
                                            /* INITIALISIEREN DER    */
                                            /* RESTLICHEN WERTE IN   */
                                            /* TITELZEILE 2          */
                                            /*************************/
          TITELZEILE2.LVSTMT.LV     = 'LV' ;
          TITELZEILE2.CFNM = ' ' ;
          TITELZEILE2.LVSTMTNR.LV = '00' ;
          TITELZEILE2.LVSTMTNR.STMT = '00000' ;
          TITELZEILE2.ZW9 = '   ' ;
                                            /*************************/
                                            /* BEI TITELWECHSEL      */
                                            /* BUFFER MIT ASM STMTS  */
                                            /* LEEREN                */
                                            /*************************/
          IF TITELZEILESCH1 & LASTREC ¬= NULL THEN CALL ASMPROC ;
       END ;
                                                          %PAGE ;
                                            /*************************/
                                            /* BEI KAPITELN ¬= 2  IST*/
                                            /* TITELZEILE2 UNVERAEN  */
                                            /* DERTER EINGABESATZ    */
                                            /*************************/
       ELSE DO ;
          TITELZSTR2A = SUBSTR(INREC,1,96) ;
          TITELZSTR2B = SUBSTR(INREC,97,25) ;
       END ;
       RETURN ;
    END TITELVER ;
                                            /*************************/
                                            /* ENDE  TITELVER        */
                                            /*************************/
 %PAGE ;
                                              /************************/
                                              /* T R A N S L A T      */
                                              /* UEBERSETZEN DES      */
                                              /* MASHINE CONTROLL CHAR*/
                                              /* IN ANSI-CODE         */
                                              /************************/
    GETLINE: PROC ;
       READ FILE (IN) INTO (INREC) ;
       RECORDIN = TRUE ;
       SELECT(UNSPEC(MCC)) ;
                                               /**********************/
       WHEN('00000001'B,'00000011'B) ACC = '+';/* PRINT ONLY        */
       WHEN('00001001'B,'00001011'B) ACC = ' ';/* SPACE 1 LINE       */
       WHEN('00010001'B,'00010011'B) ACC = '0';/* SPACE 2 LINES      */
       WHEN('00011001'B,'00011011'B) ACC = '-';/* SPACE 3 LINES      */
       WHEN('10001001'B) DO ;
          ACC = '1' ;
          UNSPEC(TITELMCC) = UNSPEC('00001001'B);
       END ;
       WHEN('10001011'B) DO ;
          ACC = '1' ;
          UNSPEC(TITELMCC) = UNSPEC('00001011'B);
       END ;
                                               /* SOLLTEN NICHT      */
                                               /* VORKOMMEN:         */
       WHEN('10010001'B,'10010011'B) ACC = '2';/* SKIP TO CHANNEL 2  */
       WHEN('10011001'B,'10011011'B) ACC = '3';/* SKIP TO CHANNEL 3  */
       WHEN('10100001'B,'10100011'B) ACC = '4';/*   "   "    "    4  */
       WHEN('10101001'B,'10101011'B) ACC = '5';/*   "   "    "    5  */
       WHEN('10110001'B,'10110011'B) ACC = '6';/*   "   "    "    6  */
       WHEN('10111001'B,'10111011'B) ACC = '7';/*   "   "    "    7  */
       WHEN('11000001'B,'11000011'B) ACC = '8';/*   "   "    "    8  */
       WHEN('11001001'B,'11001011'B) ACC = '9';/*   "   "    "    9  */
       WHEN('11010001'B,'11010011'B) ACC = 'A';/*   "   "    "   10  */
       WHEN('11011001'B,'11011011'B) ACC = 'B';/*   "   "    "   11  */
       WHEN('11100001'B,'11100011'B) ACC = 'C';/*   "   "    "   12  */
       OTHER ACC=' ' ;                         /* ELSE FALL          */
                                               /**********************/
       END ;
                                            /*************************/
                                            /* MACHINE CC MERKEN     */
                                            /*************************/
       MCC         = ADDR(INREC)->INSTR.CC ;
       IF UNSPEC(MCC) = '10001011'B THEN DO ;
          RECORDIN = FALSE ;
          UNSPEC(MCC) = '10001001'B ;
       END ;
       ELSE
                                            /*************************/
                                            /* WENN "NO PRINT" BIT   */
                                            /* DES MCC DER AKTUELLEN */
                                            /* ZEILE AN, DANN REST   */
                                            /* VON INREC BLANK SETZEN*/
                                            /*************************/
       IF SUBSTR(UNSPEC(MCC),7,1) = '1'B THEN
          SUBSTR(INREC,2,120) = ' ' ;
                                            /*************************/
                                            /* ASA ZEICHEN EINSETZEN */
                                            /*************************/
       ADDR(INREC)->INSTR.CC    = ACC ;
    END GETLINE ;

                                                             %PAGE ;
                                            /*************************/
                                             /* K A P C H N G         */
                                             /* KAPITEL HAT SICH      */
                                             /* GEANDERT, ZEILEN FUER */
                                             /* ALTES KAPITEL AUSGEBEN*/
                                            /*************************/
    KAPCHNG: PROC ;
                                            /*************************/
                                            /* ZEILENVERARBEITUNG    */
                                            /* NACH KAPITEL UNTER-   */
                                            /* SCHIEDLICH            */
                                            /*************************/
       SATZSCH = FALSE ;
       SELECT (KAPALT) ;
          WHEN (0,1,3,6) ;
          WHEN (2) CALL ASMSTEND ;
          WHEN (4) DO ;
             CALL CROSSVER ;
             IF ¬SATZSCH THEN CALL CROSSLEV1 ;
          END ;
          WHEN (5) CALL CROSSLEV2 ;
          OTHER DO ;
             PUT SKIP EDIT(MSSG5)(A) ;
             SUBSTR(OUTREC,1,124) = INREC ;
             SATZSCH = TRUE ;
          END ;
       END ;
       IF ¬SATZSCH THEN DO ;
                                           /***************************/
                                           /*  ALTES KAPITEL ZU ENDE  */
                                           /*  NEUES AUSGEBEN         */
                                           /***************************/
           KAPALT = KAP ;
                                           /***************************/
                                           /*  SORTIERKRITERIUM  KAP  */
                                           /*  WIRD IN TITELVER GEAEN */
                                           /*  DERT                   */
                                           /***************************/
           SORTKRIT.S = KAP ;
                                           /***************************/
                                           /* TITEL AUSGEBEN          */
                                           /***************************/
           TITELZEILESCH  = TRUE ;
           SUBSTR(OUTREC,1,124) = TITELZSTR1 ;
           SATZSCH = TRUE ;
       END ;
    END KAPCHNG ;
                                                             %PAGE ;
                                            /*************************/
                                             /* Z E I L V E R         */
                                             /* ANHAND GUELTIGER      */
                                             /* KAPITELNR WIRD        */
                                             /* ENTSPRECHENDE ZEILEN  */
                                             /* VERARBEITUNG EINGELEI */
                                             /* TET                   */
                                            /*************************/
    ZEILVER: PROC ;
                                            /*************************/
                                            /* SATZ WIRD VERARBEITET,*/
                                            /* ZUR UEBERGABE AUFBE-  */
                                            /* REITET. IN CROSSVER   */
                                            /* WERDEN DIE SCHALTER   */
                                            /* EVTL.WIEDER VERAENDERT*/
                                            /*************************/
       RECORDIN = FALSE ;
       SATZSCH = TRUE ;
                                            /*************************/
                                            /* ZEILENVERARBEITUNG    */
                                            /* NACH KAPITEL UNTER-   */
                                            /* SCHIEDLICH            */
                                            /*************************/
       SELECT (KAP) ;
          WHEN (1,3,6)   SUBSTR(OUTREC,1,124) = INREC ;
          WHEN (2  )     CALL ASMSTVER    ;
          WHEN (4  )     DO ;
             SATZSCH = FALSE ;
             CALL CROSSVER    ;
          END ;
          WHEN (5  )     CALL CROSSLEV    ;
          OTHER DO ;
             PUT SKIP EDIT(MSSG5)(A) ;
             SUBSTR(OUTREC,1,124) = INREC ;
          END ;
       END ;
    END ZEILVER ;
                                                             %PAGE ;
                                           /***************************/
                                           /* A S M S T V E R         */
                                           /* VERARBEITEN ALLER       */
                                           /* ASM STATEMENTS          */
    ASMSTVER: PROC ;                       /***************************/
                                           /***************************/
                                           /* RECORDS AUS BUFFER ?    */
                                           /***************************/

       IF ASMBUFFERSCH THEN DO ;
          RECORDIN = TRUE ;
          CALL ASMSTATEMENT(ADDR(FIRSTREC->RECORD.CONTENTS)) ;
          IF   FREEFIRST THEN ;
          ASMBUFFERSCH = LASTREC ¬= NULL ;
                                           /***************************/
                                           /* WAR NOCH COPY ZEILE ?   */
                                           /***************************/
          IF ¬ASMBUFFERSCH THEN
          IF COPYSCH1 THEN DO ;
             COPYSCH = TRUE ;
             LEV = LEV + 1 ;
             RECORDIN = TRUE ;
          END ;
       END ;
                                           /***************************/
                                           /* WAR NOCH TITELZEILE DA  */
                                           /***************************/
       ELSE IF TITELZEILESCH1 THEN DO ;
          SUBSTR(OUTREC,1,124) = TITELZSTR1 ;
          SORTKRIT.S = KAP;
          TITELZEILESCH  = TRUE ;
          SATZSCH = TRUE ;
          RECORDIN = TRUE ;
       END ;
                                           /***************************/
                                           /* NEUES STATEMENT         */
                                           /***************************/
       ELSE IF LASTREC = NULL THEN DO;
          CALL NEWREC ;
          SATZSCH = FALSE ;
       END ;
                                           /***************************/
                                           /* RECORDS UEBERNEHMEN     */
                                           /***************************/
                                           /***************************/
                                           /* FOLGERECORDS AUFNEHMEN  */
                                           /***************************/
       ELSE IF NOCHMEHRASM    THEN DO ;
          CALL NEWREC ;
          SATZSCH = FALSE ;
          END ;
       ELSE DO ;
                                           /***************************/
                                           /* STATEMENT FERTIG        */
                                           /***************************/
          CALL ASMPROC ;
          SATZSCH = FALSE ;
          RECORDIN = TRUE ;
       END ;
       RETURN ;
                                           /***************************/
                                           /* STATEMENT AM ENDE VON   */
                                           /* KAPITEL 4 AUSGEBEN      */
                                           /***************************/
    ASMSTEND: ENTRY ;
       IF ASMBUFFERSCH THEN DO ;
          CALL ASMSTATEMENT(ADDR(FIRSTREC->RECORD.CONTENTS)) ;
          IF   FREEFIRST THEN ;
          ASMBUFFERSCH = LASTREC ¬= NULL ;
                                           /***************************/
                                           /* WAR NOCH COPY ZEILE ?   */
                                           /***************************/
          IF ¬ASMBUFFERSCH THEN
          IF COPYSCH1 THEN DO ;
             COPYSCH = TRUE ;
             LEV = LEV + 1 ;
          END ;
       END ;
       ELSE SATZSCH = FALSE ;
       RECORDIN = TRUE ;
    END ASMSTVER ;
                                                             %PAGE ;
                                           /***************************/
                                           /* FOLGE STATEMENTS ?      */
                                           /***************************/
    NOCHMEHRASM: PROC RETURNS(BIT(1)) ;
        DCL ASMCONT1 BIT(1) ;
        ASMCONT1 = ASMCONTSCH ;
        ASMERRORSCH = SUBSTR(INREC,15,9) = '* ERROR *'
                    | SUBSTR(INREC,15,9) = ' WARNING ' ;

        ASMMACROSCH = SUBSTR(INREC,41,1) = '+'
                    | ASMMACROSCH &
                      SUBSTR(INREC,41,17) = '                =';
        ASMSPTSMACRO  = ASMSPTSMACRO |
        SUBSTR(INREC,41,15) = '+**SPTS MACEND ' |
        SUBSTR(INREC,41,14) = '+**SPTS MACRO ' ;
        ASMDATASCH  = SUBSTR(INREC,40,1) = ' ' &
                      SUBSTR(INREC,2,1) ¬= ' ' ;
        ASMCONTSCH  = SUBSTR(INREC,113,1) ¬= ' ' ;
        RETURN(ASMERRORSCH|ASMMACROSCH|ASMDATASCH|ASMCONT1) ;
    END NOCHMEHRASM ;

                                           /***************************/
                                           /* A S M S T A T E M E N T */
                                           /* EIN ASM STMT AUS BUFFER */
                                           /* KAPITEL MIT DEN ASSEM   */
    ASMSTATEMENT: PROC(INRECPTR) ;         /* BLERSTMTS WIRD NACH DEN */
       DCL INRECPTR  PTR,                  /* COPY UND ENDCOPYSTMTS   */
           INREC CHAR(121) BASED(INRECPTR);/* UNTERSUCHT              */
       SATZSCH = TRUE ;                    /***************************/
       ASSSTR.LVSTMT.LV = LEV ;
       ASSSTR.LVSTMT.ZW4 = '.' ;
                                           /**************************/
       IF OPERATION = 'COPY'               /*  COPY GEFUNDEN         */
                                           /**************************/
       THEN DO ;
          TABELLE.STNRB(TABCT) = ADDR(INREC)->INSTR.LVSTMT.STMT ;
          IF TABCT = TABMAX THEN
             CALL FEHLER('100','INTERNAL TABLE OVERFLOW IN COPY ') ;
          ELSE
             TABCT = TABCT + 1 ;
          TABELLE.PAGE(TABCT) = TABCT ;
                                           /**************************/
                                           /* COPYSCHALTER SETZEN    */
                                           /* UND INFO IN TITELZEILE */
                                           /* 2 AUFBEREITEN          */
                                           /**************************/
          COPYSCH1 = TRUE ;
          TZINFOSTR.KENNZ = 'COPY' ;
          TZINFOSTR.LVNM = CNAM ;
          TZINFOSTR.TABCT = TABCT ;
          IF STACKCT <= 1
             THEN TZINFOSTR.CFNM = TABELLE.LVNM(1) ;
             ELSE TZINFOSTR.CFNM = STACK.LVNM(STACKCT) ;
                                           /**************************/
                                           /* ZAEHLER FUER STACK     */
                                           /* ERHOEHEN               */
                                           /**************************/
          STACKCT = STACKCT + 1 ;
                                           /**************************/
                                           /* NEUESTE DATEN IN       */
                                           /* STACK UND IN DIE       */
                                           /* TABELLE EINTRAGEN      */
                                           /**************************/
          STACK.LVNM(STACKCT) = CNAM ;
          STACK.LV(STACKCT) = LEV + 1 ;
          STACK.STMTNR(STACKCT) = ADDR(INREC)->INSTR.LVSTMT.STMT ;
          TABELLE.LVNM(TABCT) = CNAM ;
          TABELLE.LV(TABCT) = LEV + 1 ;
          TABELLE.STNRA(TABCT) = ADDR(INREC)->INSTR.LVSTMT.STMT + 1 ;
                                           /**************************/
                                           /* INFORMATIONSZEILE      */
                                           /* WIRD MIT EBENENNUMMER  */
                                           /* DES AKTUELL GEFUNDENEN */
                                           /* COPY AUFGEFUELT        */
                                           /**************************/
          TZINFOSTR.LVSTMTNR.STMT = STACK.STMTNR(STACKCT) ;
          TZINFOSTR.LVSTMTNR.LV = ASSSTR.LVSTMT.LV ;
       END ;
                                           /***************************/
                                           /* KEIN COPY DANN ABFRAGE  */
                                           /* AUF  ENDCOPY            */
                                           /***************************/
       ELSE IF OPERATION = 'ENDCOPY'
       THEN DO ;
                                           /**************************/
                                           /* ENDCOPY LABEL RICHTIG? */
                                           /**************************/
          IF STACK.LVNM(STACKCT) ¬= CNAM
          THEN CALL FEHLER('101',
                           'UNEXPECTED ENDCOPY NAME -- '
                           || CNAM
                           || ' -- INSTEAD OF -- '
                           || STACK.LVNM(STACKCT)) ;
                                           /**************************/
                                           /* STACK AENDERN          */
                                           /**************************/
          IF STACKCT > 1
          THEN  STACKCT = STACKCT - 1 ;
          ELSE MISCYCT = MISCYCT + 1 ;
          IF LEV >1
          THEN  LEV = LEV - 1 ;
          ELSE LEV = 1 ;
                                           /**************************/
                                           /* TABELLE AUFBEREITEN    */
                                           /**************************/
          TABELLE.STNRB(TABCT) = ADDR(INREC)->INSTR.LVSTMT.STMT ;
          IF TABCT = TABMAX THEN
             CALL FEHLER('104','INTERNAL TABLE OVERFLOW IN ENDCOPY') ;
          ELSE
             TABCT = TABCT + 1 ;
          TABELLE.PAGE(TABCT) = TABCT ;
                                           /**************************/
                                           /* COPYSCHALTER SETZEN    */
                                           /* UND INFO AUFBAUEN      */
                                           /**************************/
          COPYSCH = TRUE ;
          TZINFOSTR.KENNZ = 'ECPY' ;
          TZINFOSTR.LVNM = CNAM ;
          TZINFOSTR.TABCT = TABCT ;
          TABELLE.STNRA(TABCT) = ADDR(INREC)->INSTR.LVSTMT.STMT + 1 ;
          TABELLE.LV(TABCT) = LEV ;
          IF LEV = 1
          THEN TABELLE.LVNM(TABCT) = TABELLE.LVNM(1) ;
          ELSE TABELLE.LVNM(TABCT)  = STACK.LVNM(STACKCT) ;
       END ;
                                           /**************************/
                                           /* END STATEMENT          */
                                           /**************************/
       ELSE IF OPERATION = 'END'
       THEN DO ;
          IF STACKCT > 1 THEN
             CALL FEHLER('102','MISSING ENDCOPY STATEMENTS') ;
          ELSE
          IF MISCYCT > 0 THEN
             CALL FEHLER('103','TOO MANY ENDCOPY STATEMENTS') ;
       END ;
       ELSE IF OPERATION = 'SASLIST'
       THEN DO ;
          CALL SETLISTCONTROL(CNAM) ;
       END ;
                                           /************************/
                                           /* WENN STMTNR NICHT   */
                                           /* EXISTIERT, DANN SOLL */
                                           /* EINGABESATZ IN SEINER*/
                                           /* STRUKTUR ERHALTEN    */
                                           /* BLEIBEN              */
                                           /************************/
       IF ADDR(INREC)->INSTR.STMT = '     '
       |  VERIFY(ADDR(INREC)->INSTR.STMT,' 0123456789') > 0
       THEN DO ;
          IF SUBSTR(INREC,2,1) ¬= ' ' THEN DO ;
             SUBSTR(OUTREC,1,35) = SUBSTR(INREC,1,35);
             SUBSTR(OUTREC,36,3) = ' '   ;
             SUBSTR(OUTREC,39,86) = SUBSTR(INREC,36,86);
          END ;
          ELSE DO ;
             SUBSTR(OUTREC,1,1) = SUBSTR(INREC,1,1);
             SUBSTR(OUTREC,2,3) = ' '   ;
             SUBSTR(OUTREC,5,120) = SUBSTR(INREC,2,120);
          END ;
       END ;
       ELSE ASSSTR = ADDR(INREC)->INSTR, BY NAME ;
       OPERATION = '' ;
       RETURN ;
    END ASMSTATEMENT ;
                                                             %PAGE ;
                                        /***************************/
                                        /* COMPRESSASMBUFFER       */
                                        /***************************/
    COMPRESSASMBUFFER: PROC ;
       DCL DPTR PTR ;
       DCL CONTFLAG BIT(1) INIT(FALSE);
       DCL INREC CHAR(121) BASED(ADDR(DPTR->RECORD.CONTENTS)) ;
                                        /***************************/
                                        /* CONTROL LOC | DATA      */
                                        /***************************/
       IF LISTCONTROL ='LOC'
       THEN DO ;
          IF LASTREC ¬= NULL THEN
          DO DPTR = FIRSTREC REPEAT DPTR->RECORD.NEXTREC
             UNTIL (DPTR = LASTREC) ;
                                        /***************************/
                                        /* FILL FIRST STATEMENT    */
                                        /***************************/
             IF SUBSTR(INREC,2,1) ¬= ' '
                & SUBSTR(FIRSTREC->RECORD.CONTENTS,2,1) = ' '
               | SUBSTR(INREC,2,6) =
                 SUBSTR(FIRSTREC->RECORD.CONTENTS,2,6)
                & SUBSTR(FIRSTREC->RECORD.CONTENTS,9,25) = ' '
             THEN DO ;
                SUBSTR(FIRSTREC->RECORD.CONTENTS,2,6)=
                SUBSTR(INREC,2,6) ;
                IF FIRSTREC ¬= DPTR THEN
                   SUBSTR(INREC,2,6) = ' ' ;
             END ;
                                        /***************************/
                                        /* DELETE RECORD ?         */
                                        /***************************/
             IF DPTR = FIRSTREC
                |  SUBSTR(INREC,41,3) = '+*,'
                |  SUBSTR(INREC,14,1) = '*'
                |  CONTFLAG      THEN
                CONTFLAG = SUBSTR(INREC,113,1) ¬= ' ' ;
             ELSE DO ;
                DPTR = DPTR->RECORD.PREVREC ;
                CALL FREEREC(DPTR->RECORD.NEXTREC) ;
             END ;
          END ;
       END ;
       ELSE IF LISTCONTROL ='DATA' |
            (LISTCONTROL ='CODE' & ASMSPTSMACRO)
       THEN DO ;
          IF LASTREC ¬= NULL THEN
          DO DPTR = FIRSTREC REPEAT DPTR->RECORD.NEXTREC
                             UNTIL (DPTR = LASTREC) ;
                                          /***************************/
                                          /* FILL FIRST STATEMENT    */
                                          /***************************/
             IF SUBSTR(INREC,2,1) ¬= ' '
                & SUBSTR(FIRSTREC->RECORD.CONTENTS,2,1) = ' '
              | SUBSTR(INREC,2,6)=SUBSTR(FIRSTREC->RECORD.CONTENTS,2,6)
                & SUBSTR(FIRSTREC->RECORD.CONTENTS,9,25) = ' '
             THEN DO ;
                SUBSTR(FIRSTREC->RECORD.CONTENTS,2,33)=
                SUBSTR(INREC,2,33) ;
                IF FIRSTREC ¬= DPTR THEN
                    SUBSTR(INREC,2,33) = ' ' ;
             END ;
                                          /***************************/
                                          /* DELETE RECORD ?         */
                                          /***************************/
             IF DPTR = FIRSTREC
                |  SUBSTR(INREC,41,3) = '+*,'
                |  SUBSTR(INREC,14,1) = '*'
                |  CONTFLAG                   THEN
                CONTFLAG = SUBSTR(INREC,113,1) ¬= ' ' ;
             ELSE IF  SUBSTR(INREC,9,1) = ' ' THEN
                DO ;
                   DPTR = DPTR->RECORD.PREVREC ;
                   CALL FREEREC(DPTR->RECORD.NEXTREC) ;
                END ;
             ELSE SUBSTR(INREC,42,72) = ' ' ;
          END ;
          ASMSPTSMACRO = FALSE ;
       END ;
    END COMPRESSASMBUFFER ;
                                                             %PAGE ;
                                        /***************************/
                                        /* ASM STATEMENT BUFFER    */
                                        /***************************/
    DCL FIRSTREC PTR INIT(NULL) ;
    DCL LASTREC  PTR INIT(NULL) ;
    DCL BUFFERCNT BIN FIXED(31) INIT(0) ;
                                        /***************************/
                                        /* BUFFER OF RECORDS       */
                                        /***************************/
    DCL  1 RECORD BASED ,
           2 NEXTREC PTR ,
           2 PREVREC PTR ,
           2 CONTENTS CHAR(121) ;
                                        /***************************/
                                        /* NEW RECORD INTO BUFFER  */
                                        /***************************/
    NEWREC:
    PROC ;
    DCL P PTR ;
       IF LASTREC = NULL THEN DO ;
          IF FIRSTREC = NULL THEN DO ;
              ALLOCATE RECORD SET(FIRSTREC) ;
              BUFFERCNT = BUFFERCNT + 1 ;
              FIRSTREC->RECORD.NEXTREC = FIRSTREC ;
              FIRSTREC->RECORD.PREVREC = FIRSTREC ;
          END ;
          LASTREC = FIRSTREC ;
       END ;
       ELSE DO ;
          IF LASTREC->RECORD.NEXTREC = FIRSTREC THEN
          DO ;
              ALLOCATE RECORD SET(P) ;
              BUFFERCNT = BUFFERCNT + 1 ;
              P->RECORD.NEXTREC = FIRSTREC ;
              FIRSTREC->RECORD.PREVREC = P ;
              LASTREC->RECORD.NEXTREC = P ;
              P->RECORD.PREVREC = LASTREC ;
          END ;
          LASTREC = LASTREC->RECORD.NEXTREC ;
       END ;
       LASTREC -> RECORD.CONTENTS = INREC ;
    END NEWREC ;
                                                             %PAGE ;
                                        /***************************/
                                        /* FREE FIRST RECORD       */
                                        /***************************/
    FREEFIRST: PROC RETURNS(BIT(1)) ;
       IF FIRSTREC = NULL | LASTREC = NULL
       THEN RETURN(FALSE) ;
       ELSE DO ;
          IF FIRSTREC = LASTREC
          THEN DO ;
            LASTREC = NULL ;
          END ;
          ELSE  FIRSTREC = FIRSTREC->RECORD.NEXTREC ;
          RETURN(TRUE) ;
       END ;
    END FREEFIRST ;
                                        /***************************/
                                        /* FREE ARBITRARY RECORD   */
                                        /***************************/
    FREEREC: PROC(PP) ;
    DCL PP PTR ;
    DCL P PTR INIT(PP) ;
       IF P = NULL THEN                 /* MURPHY'S LAW            */
          CALL FEHLER('105','INTERNAL ERROR IN FREEREC') ;
       ELSE IF FIRSTREC = P THEN        /* SPECIAL CASE            */
          CALL FREEFIRST ;
       ELSE IF LASTREC = P THEN         /* ANOTHER SPECIAL CASE    */
          LASTREC = LASTREC->RECORD.PREVREC ;
       ELSE DO ;                        /* GENERAL POSITION        */
          P->RECORD.PREVREC->RECORD.NEXTREC = P->RECORD.NEXTREC ;
          P->RECORD.NEXTREC->RECORD.PREVREC = P->RECORD.PREVREC ;
          P->RECORD.NEXTREC = FIRSTREC ;
          P->RECORD.PREVREC = FIRSTREC->RECORD.PREVREC ;
          FIRSTREC->RECORD.PREVREC->RECORD.NEXTREC = P ;
          FIRSTREC->RECORD.PREVREC = P ;
       END ;
    END FREEREC ;
    %PAGE ;
                                        /***************************/
                                        /* FREE ARBITRARY RECORD   */
                                        /***************************/
    DUMPREC: PROC ;
    DCL P PTR,I BIN FIXED(31) INIT(0) ;
       DCL INREC BASED(ADDR(P->RECORD.CONTENTS)) CHAR(121) ;
          PUT SKIP EDIT('DUMP RECORD BUFFER',BUFFERCNT)(A,F(6)) ;
          IF FIRSTREC ¬= NULL THEN
          DO P = FIRSTREC REPEAT P->RECORD.NEXTREC
                 WHILE(I<BUFFERCNT) ;
          I = I+ 1 ;
          PUT SKIP EDIT(I,'**',INREC,'**')(F(6),A,A,A,A) ;
          END ;
    END DUMPREC ;
                                                             %PAGE ;
                                               /**********************/
                                               /* A S M P R O C      */
                                               /* AUFFINDEN VON COPY,*/
                                               /* ENDCOPY UND END    */
                                               /* VODCOPY UND END    */
                                               /**********************/
    ASMPROC: PROC ;
            DCL  Z CHAR(80) VAR ,
            J BIN FIXED(15) INIT(1),
            I BIN FIXED(31) ,
            INREC CHAR(121) BASED(ADDR(FIRSTREC->RECORD.CONTENTS)) ;
                                         /****************************/
                                         /* INITIALISIEREN OPERATION */
                                         /****************************/
       OPERATION = '' ;
       IF   SUBSTR(INREC,13,1)  = '*'    /*****************************/
       THEN ;                            /* BEI FEHLENDER STATEMENTNR.*/
       ELSE                              /* ODER KOMMENTAR , KEINE    */
       IF ADDR(INREC)->INSTR.STMT ¬= ''  /* ABFRAGE AUF OPERATIONEN */
       THEN DO ;
          LETZTE_STMT_NR = ADDR(INREC)->INSTR.LVSTMT.STMT ;
          IF  SUBSTR(INREC,42,1) ¬= '*'  /*  COMMENT                  */
            & SUBSTR(INREC,9,1)   = ' '  /*  NO MACHINE INSTRUCTION   */
            & SUBSTR(INREC,42,1)  = ' '  /*  NO LABEL                 */
          THEN DO ;
                                         /*****************************/
                                         /* UEBERLESEN BLANKS         */
                                         /*****************************/
             I = 43 ;
             DO  WHILE(I < 109 & SUBSTR(INREC,I,1) = ' ') ;
                I = I + 1 ;
             END ;
                                         /*****************************/
                                         /* BEI 'COPY' COPYNAME SPEI- */
                                         /* CHERN (FALLS VORHANDEN)   */
                                         /*****************************/
             IF SUBSTR(INREC,I,5) = 'COPY '
             THEN DO ;
                Z = SUBSTR(INREC,I+4) ;
                I = VERIFY(Z,' ') ;
                IF I = 0 THEN CNAM = '' ;
                ELSE
                DO ;
                   OPERATION = 'COPY' ;
                   CNAM = SUBSTR(Z,I,8) ;
                END ;
             END ;
             ELSE
             IF SUBSTR(INREC,I,8) = 'ENDCOPY '
             THEN DO ;
                Z = SUBSTR(INREC,I+7) ;
                I = VERIFY(Z,' ') ;
                IF I = 0 THEN CNAM = '' ;
                ELSE
                DO ;
                   OPERATION = 'ENDCOPY' ;
                   CNAM = SUBSTR(Z,I,8) ;
                END ;
             END ;
             ELSE
             IF SUBSTR(INREC,I,8) = 'SASLIST '
             THEN DO ;
                Z = SUBSTR(INREC,I+7) ;
                I = VERIFY(Z,' ') ;
                IF I = 0 THEN CNAM = '' ;
                ELSE
                DO ;
                   OPERATION = 'SASLIST' ;
                   CNAM = SUBSTR(Z,I,5) ;
                END ;
             END ;
             ELSE
             IF SUBSTR(INREC,I,4) = 'END '
                THEN OPERATION = 'END' ;
          END ;
       END ;
       CALL COMPRESSASMBUFFER ;
                                         /*****************************/
                                         /* ENDE  F I N D O P         */
                                         /*****************************/
       ASMBUFFERSCH = LASTREC ¬= NULL ;
    END ASMPROC ;
                                                             %PAGE ;
                                         /*****************************/
                                         /* KAPITEL MIT DEN CROSS-    */
                                         /* REFERENCES WIRD AUFBEREI- */
                                         /* TET.                      */
                                         /*****************************/
    DCL SHORTREF BIT (1) INIT('0'B),
        SKIPXREF BIT (1) INIT('0'B);
    DCL (REFCT,SAFEREFCT,DRCT) BIN FIXED(30) STATIC INIT(0),
        D            BIN FIXED(30) STATIC INIT(1) ;

    CROSSVER:PROC ;
       DCL (I,J,K) BIN FIXED(30) INIT(1) ;
       DCL APOSTRSCH BIT(1) INIT('0'B) ;

                                         /*****************************/
                                         /*        AUSGABEMODUS       */
                                         /*****************************/
       IF SATZSCH THEN CALL XREFOUT ;
                                         /*****************************/
                                         /*        EINGABEMODUS       */
                                         /*****************************/
       ELSE DO ;
                                                /**********************/
                                                /* IGNORE OVERPRINTS  */
                                                /* OF SLAC ASM        */
                                                /* THIS IS A TEST     */
                                                /**********************/
          IF SUBSTR(INREC,1,1) = '+' & KAPALT = KAP
          THEN DO ;
             CALL GETMODS ;
             RECORDIN = FALSE ;
             SATZSCH  = FALSE ;
          END ;
                                                /**********************/
                                                /* VERARB. ANFANGSSATZ*/
                                                /* ODER KAPWECHSEL    */
                                                /**********************/
          ELSE IF SUBSTR(INREC,2,1) ¬= ' ' | KAPALT ¬= KAP
          THEN DO ;
                                                /**********************/
                                                /* DIE LETZTE STMTNR. */
                                                /* IN DIE TABELLE     */
                                                /* CHERN              */
                                                /**********************/
             TABELLE.STNRB(TABCT) = LETZTE_STMT_NR ;
                                                /**********************/
                                                /* VERARB. ANFANGSSATZ*/
                                                /**********************/
             IF REFCT = 0 & (KAP = KAPALT)  THEN DO ;
                FELD = 0 ;
                RECORDIN = FALSE ;
                                                /**********************/
                                                /* AUF UEBERLANGE     */
                                                /* KONSTANTE PRUEFEN  */
                                                /**********************/
                APOSTRSCH = FALSE ;
                DO I = 2 TO 9 ;
                   IF (SUBSTR(INREC,I,1)  =  '''') THEN
                   APOSTRSCH = ¬APOSTRSCH ;
                END ;
                IF  APOSTRSCH | SUBSTR(INREC,10,1) ¬= ' '
                                                /**********************/
                                                /* ZU LANGE KONSTANTE */
                                                /**********************/
                THEN DO ;
                   SUBSTR(OUTREC,1,1) = ' ' ;
                   SUBSTR(OUTREC,2,123) = SUBSTR(INREC,2) ;
                   SATZSCH = TRUE ;
                END ;
                ELSE DO ;
                                               /***********************/
                                               /*   NORMALE KONSTANTE */
                                               /***********************/
                   XREFSATZ(1).ANFANG = SUBSTR(INREC,2,23) ;
                   IF SUBSTR(INREC,11,1) = '*' |
                      SUBSTR(INREC,25,6) = ' ' THEN
                      UNDEFINEDXREF=SUBSTR(INREC,2,29) ;
                   ELSE DO ;
                      WERT = SUBSTR(INREC,25,6) ;
                      XREFSATZ(1).DEF = ADDLEVEL ;
                   END ;
                   REFCT = 0;
                   CALL GETREFS ;
                   SATZSCH  = FALSE ;
                END ;
                IF LISTCONTROL ¬= 'ASIS'
                &  SUBSTR(INREC,2,2) = '@@' THEN DO;
                   SKIPXREF = TRUE;
                   SATZSCH = FALSE ;
                END ;
                ELSE SKIPXREF = FALSE ;
             END ;
             ELSE DO ;
                                               /***********************/
                                               /*VERARBEITE REFERENZEN*/
                                               /*DRUCKSAETZE  AUFBER. */
                                               /***********************/
                XREFSATZ.REF    = 0 ;
                I = 1 ;
                DO    J = 1 TO 200 WHILE(REFCT ¬= 0) ;
                   DO K = 1 TO 10 WHILE(REFCT ¬= 0) ;
                      XREFSATZ(J).REF(K) = FELD(I) ;
                      IF BFELD(I) THEN
                      ADDR(XREFSATZ(J).REF(K))->REF.COLON = ':' ;
                      I = I + 1 ; REFCT = REFCT - 1 ;
                   END ;
                END ;
                DRCT = J - 1 ;
                D = 0;
                                                /**********************/
                                                /*   1. SATZ AUSGEBEN */
                                                /**********************/
                CALL XREFOUT ;
             END ;
          END ;
          ELSE DO ;
                                                /*********************/
                                                /* VERARB. FOLGESATZ */
                                                /*********************/
             RECORDIN = FALSE ; SATZSCH = FALSE ;
             IF SUBSTR(INREC,11,1) ¬= ' ' THEN DO;
                                                /*********************/
                                                /*  MIT DEFINITION   */
                                                /*********************/
                XREFSATZ(1).ANFANG = SUBSTR(INREC,2,23) ;
                IF SUBSTR(INREC,11,1) ¬= '*' THEN DO ;
                   WERT = SUBSTR(INREC,25,6) ;
                   XREFSATZ(1).DEF = ADDLEVEL ;
                END ;
                ELSE UNDEFINEDXREF=SUBSTR(INREC,2,29) ;
             END ;
                                                /*********************/
                                                /*  REF EINTRAGEN    */
                                                /*********************/
             CALL GETREFS ;
          END ;
       END ;
    END CROSSVER ;
 %PAGE ;
                                           /**************************/
                                           /* REFERENZEN AUS         */
                                           /* EINGABESATZ UEBERNEHMEN*/
                                           /**************************/
    GETREFS: PROC ;
             DCL I BIN FIXED(31) INIT(1);
             SAFEREFCT = REFCT ;
             IF SHORTREF THEN
             DO WHILE(I<19 & SUBSTR(INREC,31+(I-1)*5,5) ¬= ' ') ;
                WERT = SUBSTR(INREC,31+(I-1)*5,5) ;
                REFCT = REFCT + 1 ;
                FELD(REFCT) = ADDLEVEL ;
                BFELD(REFCT) = FALSE ;
                I = I + 1 ;
             END ;
             ELSE DO WHILE(I<16 & SUBSTR(INREC,32+(I-1)*6,6) ¬= ' ') ;
                WERT = SUBSTR(INREC,32+(I-1)*6,6) ;
                REFCT = REFCT + 1 ;
                FELD(REFCT) = ADDLEVEL ;
                BFELD(REFCT) = FALSE ;
                I = I + 1 ;
             END ;
    END GETREFS ;
                                           /**************************/
                                           /* OVERPRINTS FUER        */
                                           /* REFERENZEN UEBERNEHMEN */
                                           /**************************/
    GETMODS: PROC ;
             DCL I BIN FIXED(31) INIT(1);
             DO WHILE (SAFEREFCT<REFCT);
                SAFEREFCT = SAFEREFCT + 1;
                IF SHORTREF THEN
                BFELD(SAFEREFCT)=SUBSTR(INREC,31+(I-1)*5,5) ¬= ' ' ;
                ELSE
                BFELD(SAFEREFCT)=SUBSTR(INREC,32+(I-1)*6,6) ¬= ' ' ;
                I = I + 1 ;
             END;
    END GETMODS ;
                                           /**************************/
                                           /* ZUGEHOERIGE LEVELNUMMER*/
                                           /* IN TABELLE SUCHEN UND  */
                                           /* AUF DEN UEBERGEBENEN   */
                                           /* WERT ADDIEREN          */
    ADDLEVEL: PROC RETURNS(PIC'ZZZ.ZZZZZ');/**************************/
       DCL GR(2) BIN FIXED(15),
           MITTPKT   BIN FIXED(15) ;
       DCL WERTFEHLER STATIC BIT(1) INIT('0'B) ;
       GR(1) = 1 ;
       GR(2) = TABCT ;
       MITTPKT = (GR(1) + GR(2)) / 2 ;
                                           /*************************/
                                           /* BINAERES SUCHEN  IN   */
                                           /* DER TABELLE           */
       DO WHILE (GR(1) ¬= GR(2)) ;         /*************************/
          SELECT ;
             WHEN ( WERT >= TABELLE.STNRA(GR(1)) &
                    WERT <= TABELLE.STNRB(MITTPKT))
             DO ;
                GR(2) = MITTPKT ;
                MITTPKT = (GR(1) + GR(2)) / 2 ;
             END ;
             WHEN ( WERT >= TABELLE.STNRA(MITTPKT) &
                    WERT <= TABELLE.STNRB(GR(2)))
             DO ;
                GR(1) = MITTPKT + 1 ;
                MITTPKT = (GR(1) + GR(2)) / 2 ;
             END ;
             OTHER DO ;
                IF ¬WERTFEHLER THEN
                PUT SKIP EDIT ('WERT NICHT GEFUNDEN') (A) ;
                WERTFEHLER = TRUE ;
                GR(1) = GR(2) ;
             END ;
          END ;
       END ;
                                         /*****************************/
                                         /* ADDITION UND UEBERGABE    */
                                         /*****************************/
       RETURN (WERT + TABELLE.LV(GR(1))*100000) ;
    END ADDLEVEL ;
                                         /*****************************/
                                         /* XREF ZEILE AUSGEBEN       */
                                         /*****************************/
    XREFOUT: PROC;
       DCL CH124 CHAR(124) BASED(PCH124), PCH124 PTR ;
       RECORDIN = TRUE ;
       IF SKIPXREF THEN DRCT = 0;
       IF DRCT = 0 THEN SATZSCH = FALSE ;
       ELSE DO ;
          D = D + 1 ;
          ADDR(OUTREC)->CH124=ADDR(XREFSATZ(D))->CH124 ;
          DRCT = DRCT - 1 ;
          SATZSCH = TRUE ;
       END ;
    END  XREFOUT ;
 %PAGE ;
                                           /**************************/
                                           /* 1. TITEL FUER LEVEL    */
                                           /* CROSS REFERENCE        */
                                           /**************************/
    CROSSLEV1: PROC ;
       PUT STRING(OUTREC)
                 EDIT('1',TITELMODUL,'LEVEL CROSS REFERENCE','PAGE')
                     (A,A,X(34),A,X(48),A) ;
       KAPALT = 5 ;
       RECORDIN = TRUE;
       SORTKRIT.LV = 1;
       SORTKRIT.S = KAPALT ;
       SATZSCH = TRUE ;
    END CROSSLEV1 ;
                                           /**************************/
                                           /* 1. TITEL FUER LEVEL    */
                                           /* CROSS REFERENCE        */
                                           /**************************/
    DCL KAPNEXT BIN FIXED(31) STATIC INIT(6);
    CROSSLEV2: PROC ;
       IF TABCT > 0 THEN DO
          LEVELINDEX = 0;
          SUBSTR(OUTREC,1,124) = TITELZSTR2 ;
          SUBSTR(OUTREC,1,41) =
          '-COPYNAME   LEVEL    FROM      TO    PAGE';
          KAPNEXT = KAP ;
          KAP = KAPALT ;
          RECORDIN = TRUE;
          SORTKRIT.LV = 1;
          SATZSCH = TRUE ;
       END ;
    END CROSSLEV2 ;
       DCL LEVELINDEX STATIC BIN FIXED(31) INIT(0) ;
                                           /**************************/
                                           /* CROSS-REFERENCE FUER   */
                                           /* LEVELNUMMERN           */
                                           /**************************/
    CROSSLEV: PROC ;

       RECORDIN = TRUE ;
       IF TABCT > 0 THEN DO ;
                                           /**************************/
                                           /* ALLE LEVEL-RECORDS     */
                                           /* AUSGEGEBEN ?           */
                                           /**************************/
          IF LEVELINDEX >= TABCT THEN DO ;
             TABCT = 0 ;
             SATZSCH = FALSE ;
          END ;
                                           /**************************/
                                           /* NAECHSTER RECORD       */
          ELSE DO ;                        /**************************/
             LEVELINDEX = LEVELINDEX + 1 ;
             PUT STRING(OUTREC) EDIT(TABELLE(LEVELINDEX))
              (X(1),A,X(2),F(6),X(2),F(6),X(2),F(6),X(2),F(6));
                TABELLE.PAGE(LEVELINDEX) = 0 ;
             SORTKRIT.LV = 1;
             SORTKRIT.S = KAPALT ;
             SATZSCH = TRUE ;
          END ;
       END ;
       ELSE DO ;
          KAP = KAPNEXT ;
          SATZSCH = FALSE ;
       END ;
    END CROSSLEV ;
                                                             %PAGE ;
                                           /**************************/
                                           /* E 3 5 X                */
                                           /* AUFBEREITEN DER FERTIG */
                                           /* SORTIERTEN SAETZE FUER */
                                           /* DIE AUSGABE AUF DRUCKER*/
                                           /**************************/
    E35X: PROC(PARMREC) ;
       DCL PARMREC CHAR(134),
           DRUCKREC  CHAR(124) DEF PARMREC ;
       DCL PRINTREC  CHAR(124) DEF OUTREC ;
       DCL PRINTRECPAGE CHAR(6) DEF OUTREC POS(36) ;
       DCL(E35XLEV) FIXED BIN(15) INIT(1) STATIC ;
       DCL(E35XKAP) FIXED BIN(15) INIT(0) STATIC ;

       DCL VORSCHUB CHAR(1) DEF OUTREC ;
                                           /**************************/
                                           /* UM MIT STRUKTUREN, DIE */
                                           /* AUF OUTREC DEFINIERT   */
                                           /*SIND,ARBEITEN ZU KOENNEN*/
                                           /**************************/
       OUTREC = PARMREC ;
                                           /**************************/
                                           /* IST DAS KONTROLLZEICHEN*/
                                           /* EIN SEITENVORSCHUB     */
                                           /* ==> TITELZEILE AUFBEREI*/
                                           /*      TEN               */
                                           /**************************/
       IF VORSCHUB= '1'
       THEN DO ;
          ERWTZ2 = TRUE ;
          TZWECHSELSCH =
          SUBSTR(TITELZSTR1,1,102) ¬= SUBSTR(DRUCKREC,1,102) ;
          TITELZSTR1 = DRUCKREC ;
                                           /**************************/
                                           /* NAECHSTEN SATZ VON     */
                                           /* SORT                   */
                                           /**************************/
          CALL PLIRETC(4) ;
          RETURN ;
       END ;
       IF ERWTZ2
       THEN DO ;
          TITELZSTR2 = DRUCKREC ;
          SUBSTR(TITELZSTR2,1,1) = ' ' ;
                                           /**************************/
                                           /* WENN UEBERSCHRIFT FUER */
                                           /* ASSEMBLERSTMTS,        */
                                           /* AKTUELLE INFO EINTRAGEN*/
                                           /**************************/
          IF SORTKRIT.S = 2
          THEN DO ;
                                           /**************************/
                                           /* FUER HAUPTPROGRAM      */
                                           /* KEINE INFOS            */
                                           /**************************/
             IF TZINFOSTR.LVSTMTNR.STMT = '00000'
             THEN STRING(EINSCHUB) = ' ';
             ELSE DO;
                EINSCHUB.CFNM   = TZINFOSTR.CFNM ;
                EINSCHUB.LVSTMTNR = TZINFOSTR.LVSTMTNR,BY NAME ;
                EINSCHUB.LVNM   = TZINFOSTR.LVNM ;
                EINSCHUB.TXT1 = 'NAME: ' ;
                EINSCHUB.TXT2 = 'CALLED FROM: ' ;
                EINSCHUB.ZW7 = '/' ;
                EINSCHUB.LVSTMTNR.ZW8 = '.' ;
                EINSCHUB.ZW6 = '   ' ;
                EINSCHUB.ZW10 = '   ' ;
             END ;
          END ;
          EMPTYSCH = TRUE ;
          ERWTZ2 = FALSE ;
          CALL PLIRETC(4) ;
          RETURN ;
       END ;
  %PAGE ;
                                           /**************************/
                                           /* WENN AUSGABESATZ EIN   */
                                           /* INFOSATZ FUER TITELZEI */
                                           /* LE 2, DANN EINTRAG IN  */
                                           /* TITEL ERNEUERN MIT DEN */
                                           /* DATEN VON INFOSATZ     */
                                           /**************************/
       IF SUBSTR(DRUCKREC,1,4) = 'COPY'
       THEN DO ;
          TZINFOSCH = TRUE ;
          SUBSTR(TITELZSTR1,2,120) = ' ';
                                            /**************************/
                                            /* DEN AKTUELLEN SATZ AUF */
                                            /* TZINFO2, DAMIT DIE DA  */
                                            /* RAUF DEFINIERTE STRUK  */
                                            /* TUR ANGEWENDET WERDEN  */
                                            /* KANN                   */
                                            /**************************/
          TZINFO2 = DRUCKREC ;
                                           /**************************/
                                           /* AUFBEREITUNG BEENDET ! */
                                           /* NAECHSTEN SATZ GEBEN   */
                                           /* LASSEN                 */
                                           /**************************/
          CALL PLIRETC(4) ;
          RETURN ;
       END ;
                                           /**************************/
                                           /* WENN AUSGABESATZ EIN   */
                                           /* INFOSATZ NACH ENDCOPY  */
                                           /* STMT, DANN EINTRAG IN  */
                                           /* TITEL ERNEUERN MIT DEN */
                                           /* DATEN VON INFOSATZ     */
                                           /**************************/
       IF SUBSTR(DRUCKREC,1,4) = 'ECPY'
       THEN DO ;
          TZECPYSCH = TRUE ;
          SUBSTR(TZINFO2,29,5) = SUBSTR(DRUCKREC,29,5);
                                           /**************************/
                                           /* AUFBEREITUNG BEENDET ! */
                                           /* NAECHSTEN SATZ GEBEN   */
                                           /* LASSEN                 */
                                           /**************************/
          CALL PLIRETC(4) ;
          RETURN ;
       END ;
       IF (SUBSTR(DRUCKREC,2,120) = ' ') & (TZINFOSCH)
       THEN DO ;
          CALL PLIRETC(4) ;
          RETURN ;
       END ;
 %PAGE ;
                                           /**************************/
                                          /* AKTUALISIEREN DES ZEILEN */
                                          /* ZAEHLERS FUER EINE SEITE */
                                           /**************************/
       SELECT (VORSCHUB) ;
          WHEN('+')                     ;
          WHEN(' ') PGLNCT = PGLNCT + 1 ;
          WHEN('0') PGLNCT = PGLNCT + 2 ;
          WHEN('-') PGLNCT = PGLNCT + 3 ;
          OTHERWISE DO ;
             VORSCHUB = ' ' ;
             PGLNCT = PGLNCT + 1 ;
          END ;
       END ;
  %PAGE ;
                                          /***************************/
                                          /* WENN TITELZEILE2 GEFUN  */
                                          /* DEN, VORSCHUB AENDERN   */
                                          /***************************/
       IF EMPTYSCH
       THEN DO ;
          EMPTYSCH = FALSE ;
          SUBSTR(DRUCKREC,1,1) = ' ' ;
       END ;
                                          /***************************/
                                          /* SEITENVORSCHUB BEI      */
                                          /* GRUPPENWECHSEL          */
                                          /* A) KAPITELWECHSEL       */
                                          /* B) LEVELWECHSEL IN KAP2 */
                                          /* C) COPY-WECHSEL IN KAP2 */
                                          /* D) TITELWECHSEL IN KAP2 */
                                          /* E) ZEILENANZAHL FUER    */
                                          /*    EINE SEITE ZU GROSS  */
                                          /***************************/

                                          /***************************/
                                          /* A) KAPITELWECHSEL       */
                                          /***************************/
       SELECT ;
          WHEN(E35XKAP ¬= SORTKRIT.S)
                    CALL SEITENVORSCHUB ;
          WHEN(E35XKAP = 1 & TZWECHSELSCH)
                    CALL SEITENVORSCHUB ;
          WHEN(E35XKAP = 2)
          DO ;
                                          /***************************/
                                          /* C) NEUES COPY   IN KAP2 */
                                          /***************************/
             IF TZINFOSCH THEN DO ;
                CALL SEITENVORSCHUB ;
                TABELLE.PAGE(TZINFOSTR.TABCT) = NEWPGNO ;
             END ;
             ELSE
                                          /***************************/
                                          /* B) LEVELWECHSEL IN KAP2 */
                                          /***************************/
             IF E35XLEV ¬= SORTKRIT.LV
                                          /***************************/
                                          /* D) TITELWECHSEL IN KAP2 */
                                          /***************************/
             |  TZWECHSELSCH
             THEN
                                          /***************************/
                                          /* IN ALLEN FAELLEN NEUE S.*/
                                          /***************************/
                CALL SEITENVORSCHUB ;
             IF TZECPYSCH THEN DO ;
                TZECPYSCH = FALSE ;
                TABELLE.PAGE(TZINFOSTR.TABCT) = NEWPGNO +
                 (PGLNCT > LNMAX) ;
             END ;
          END ;
          WHEN(E35XKAP = 5) DO ;
             IF PRINTRECPAGE  = '     0' THEN
                PRINTRECPAGE  = '      ' ;
             ELSE
                PUT STRING(PRINTRECPAGE) EDIT(
                TABELLE.PAGE(PRINTRECPAGE)) (F(6)) ;
          END ;
 %PAGE ;
                                          /***************************/
                                          /* E) ZEILENANZAHL FUER    */
                                          /* EINE SEITE              */
                                          /* GROESSER ALS DAS ANGE-  */
                                          /* GEBENE MAXIMUM PRO SEITE*/
                                          /***************************/
          OTHER ;
       END ;
       IF PGLNCT > LNMAX
       THEN CALL SEITENVORSCHUB ;
       WRITE FILE(OUT) FROM(PRINTREC) ;
       CALL PLIRETC(4) ;
 %PAGE ;
                                              /************************/
                                              /* SEITENNUMMER ER-     */
                                              /* NEUERN, TITELZEILEN  */
                                              /* DRUCKEN              */
                                              /************************/
       SEITENVORSCHUB: PROC ;
          NEWPGNO = NEWPGNO + 1 ;
          SUBSTR(TITELZSTR1,119,6) = NEWPGNO ;
                                              /************************/
                                              /* PGLNCT IST NEUER     */
                                              /* WERT NACH DRUCKEN DER*/
                                              /* 2 TITELZEILEN        */
                                              /************************/
          PGLNCT = 7 ;
          WRITE FILE(OUT) FROM(TITELZSTR1) ;
          WRITE FILE(OUT) FROM(TITELZSTRSAS) ;
          WRITE FILE(OUT) FROM(TITELZSTR2) ;
          VORSCHUB = '0' ;
             E35XLEV = SORTKRIT.LV ;
             E35XKAP = SORTKRIT.S ;
             TZINFOSCH    = FALSE ;
             TZWECHSELSCH = FALSE ;
       END SEITENVORSCHUB ;
    END E35X ;
                                         /*****************************/
                                         /* ENDE  S A S L I S T       */
                                         /*****************************/
    PUT SKIP EDIT('NUMBER OF RECOGNIZED ERRORS:',FEHLERTOTAL,
                  ', NUMBER OF ERROR MESSAGES: ',MELDUNGTOTAL)
                 (A,F(5),A,F(5)) ;
    PUT SKIP EDIT('SASLIST END')(A) ;
 END SASLIST ;
